!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.MemoryModelsRough=e():t.MemoryModelsRough=e()}(global,(()=>(()=>{var t={167:(t,e)=>{"use strict";function n(t,e){return void 0===e&&(e=Object),e&&"function"==typeof e.freeze?e.freeze(t):t}var r=n({HTML:"text/html",isHTML:function(t){return t===r.HTML},XML_APPLICATION:"application/xml",XML_TEXT:"text/xml",XML_XHTML_APPLICATION:"application/xhtml+xml",XML_SVG_IMAGE:"image/svg+xml"}),i=n({HTML:"http://www.w3.org/1999/xhtml",isHTML:function(t){return t===i.HTML},SVG:"http://www.w3.org/2000/svg",XML:"http://www.w3.org/XML/1998/namespace",XMLNS:"http://www.w3.org/2000/xmlns/"});e.assign=function(t,e){if(null===t||"object"!=typeof t)throw new TypeError("target is not an object");for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t},e.find=function(t,e,n){if(void 0===n&&(n=Array.prototype),t&&"function"==typeof n.find)return n.find.call(t,e);for(var r=0;r<t.length;r++)if(Object.prototype.hasOwnProperty.call(t,r)){var i=t[r];if(e.call(void 0,i,r,t))return i}},e.freeze=n,e.MIME_TYPE=r,e.NAMESPACE=i},129:(t,e,n)=>{var r=n(167),i=n(146),o=n(45),a=n(925),s=i.DOMImplementation,h=r.NAMESPACE,c=a.ParseError,u=a.XMLReader;function l(t){return t.replace(/\r[\n\u0085]/g,"\n").replace(/[\r\u0085\u2028]/g,"\n")}function f(t){this.options=t||{locator:{}}}function d(){this.cdata=!1}function p(t,e){e.lineNumber=t.lineNumber,e.columnNumber=t.columnNumber}function m(t){if(t)return"\n@"+(t.systemId||"")+"#[line:"+t.lineNumber+",col:"+t.columnNumber+"]"}function g(t,e,n){return"string"==typeof t?t.substr(e,n):t.length>=e+n||e?new java.lang.String(t,e,n)+"":t}function y(t,e){t.currentElement?t.currentElement.appendChild(e):t.doc.appendChild(e)}f.prototype.parseFromString=function(t,e){var n=this.options,r=new u,i=n.domBuilder||new d,a=n.errorHandler,s=n.locator,c=n.xmlns||{},f=/\/x?html?$/.test(e),p=f?o.HTML_ENTITIES:o.XML_ENTITIES;s&&i.setDocumentLocator(s),r.errorHandler=function(t,e,n){if(!t){if(e instanceof d)return e;t=e}var r={},i=t instanceof Function;function o(e){var o=t[e];!o&&i&&(o=2==t.length?function(n){t(e,n)}:t),r[e]=o&&function(t){o("[xmldom "+e+"]\t"+t+m(n))}||function(){}}return n=n||{},o("warning"),o("error"),o("fatalError"),r}(a,i,s),r.domBuilder=n.domBuilder||i,f&&(c[""]=h.HTML),c.xml=c.xml||h.XML;var g=n.normalizeLineEndings||l;return t&&"string"==typeof t?r.parse(g(t),c,p):r.errorHandler.error("invalid doc source"),i.doc},d.prototype={startDocument:function(){this.doc=(new s).createDocument(null,null,null),this.locator&&(this.doc.documentURI=this.locator.systemId)},startElement:function(t,e,n,r){var i=this.doc,o=i.createElementNS(t,n||e),a=r.length;y(this,o),this.currentElement=o,this.locator&&p(this.locator,o);for(var s=0;s<a;s++){t=r.getURI(s);var h=r.getValue(s),c=(n=r.getQName(s),i.createAttributeNS(t,n));this.locator&&p(r.getLocator(s),c),c.value=c.nodeValue=h,o.setAttributeNode(c)}},endElement:function(t,e,n){var r=this.currentElement;r.tagName,this.currentElement=r.parentNode},startPrefixMapping:function(t,e){},endPrefixMapping:function(t){},processingInstruction:function(t,e){var n=this.doc.createProcessingInstruction(t,e);this.locator&&p(this.locator,n),y(this,n)},ignorableWhitespace:function(t,e,n){},characters:function(t,e,n){if(t=g.apply(this,arguments)){if(this.cdata)var r=this.doc.createCDATASection(t);else r=this.doc.createTextNode(t);this.currentElement?this.currentElement.appendChild(r):/^\s*$/.test(t)&&this.doc.appendChild(r),this.locator&&p(this.locator,r)}},skippedEntity:function(t){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(t){(this.locator=t)&&(t.lineNumber=0)},comment:function(t,e,n){t=g.apply(this,arguments);var r=this.doc.createComment(t);this.locator&&p(this.locator,r),y(this,r)},startCDATA:function(){this.cdata=!0},endCDATA:function(){this.cdata=!1},startDTD:function(t,e,n){var r=this.doc.implementation;if(r&&r.createDocumentType){var i=r.createDocumentType(t,e,n);this.locator&&p(this.locator,i),y(this,i),this.doc.doctype=i}},warning:function(t){console.warn("[xmldom warning]\t"+t,m(this.locator))},error:function(t){console.error("[xmldom error]\t"+t,m(this.locator))},fatalError:function(t){throw new c(t,this.locator)}},"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,(function(t){d.prototype[t]=function(){return null}})),e.DOMParser=f},146:(t,e,n)=>{var r=n(167),i=r.find,o=r.NAMESPACE;function a(t){return""!==t}function s(t,e){return t.hasOwnProperty(e)||(t[e]=!0),t}function h(t){if(!t)return[];var e=function(t){return t?t.split(/[\t\n\f\r ]+/).filter(a):[]}(t);return Object.keys(e.reduce(s,{}))}function c(t,e){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}function u(t,e){var n=t.prototype;if(!(n instanceof e)){function r(){}r.prototype=e.prototype,c(n,r=new r),t.prototype=n=r}n.constructor!=t&&("function"!=typeof t&&console.error("unknown Class:"+t),n.constructor=t)}var l={},f=l.ELEMENT_NODE=1,d=l.ATTRIBUTE_NODE=2,p=l.TEXT_NODE=3,m=l.CDATA_SECTION_NODE=4,g=l.ENTITY_REFERENCE_NODE=5,y=l.ENTITY_NODE=6,b=l.PROCESSING_INSTRUCTION_NODE=7,v=l.COMMENT_NODE=8,_=l.DOCUMENT_NODE=9,w=l.DOCUMENT_TYPE_NODE=10,x=l.DOCUMENT_FRAGMENT_NODE=11,M=l.NOTATION_NODE=12,N={},E={},T=(N.INDEX_SIZE_ERR=(E[1]="Index size error",1),N.DOMSTRING_SIZE_ERR=(E[2]="DOMString size error",2),N.HIERARCHY_REQUEST_ERR=(E[3]="Hierarchy request error",3)),O=(N.WRONG_DOCUMENT_ERR=(E[4]="Wrong document",4),N.INVALID_CHARACTER_ERR=(E[5]="Invalid character",5),N.NO_DATA_ALLOWED_ERR=(E[6]="No data allowed",6),N.NO_MODIFICATION_ALLOWED_ERR=(E[7]="No modification allowed",7),N.NOT_FOUND_ERR=(E[8]="Not found",8)),S=(N.NOT_SUPPORTED_ERR=(E[9]="Not supported",9),N.INUSE_ATTRIBUTE_ERR=(E[10]="Attribute in use",10));function k(t,e){if(e instanceof Error)var n=e;else n=this,Error.call(this,E[t]),this.message=E[t],Error.captureStackTrace&&Error.captureStackTrace(this,k);return n.code=t,e&&(this.message=this.message+": "+e),n}function A(){}function D(t,e){this._node=t,this._refresh=e,I(this)}function I(t){var e=t._node._inc||t._node.ownerDocument._inc;if(t._inc!=e){var n=t._refresh(t._node);bt(t,"length",n.length),c(n,t),t._inc=e}}function C(){}function P(t,e){for(var n=t.length;n--;)if(t[n]===e)return n}function L(t,e,n,r){if(r?e[P(e,r)]=n:e[e.length++]=n,t){n.ownerElement=t;var i=t.ownerDocument;i&&(r&&$(i,t,r),function(t,e,n){t&&t._inc++,n.namespaceURI===o.XMLNS&&(e._nsMap[n.prefix?n.localName:""]=n.value)}(i,t,n))}}function R(t,e,n){var r=P(e,n);if(!(r>=0))throw new k(O,new Error(t.tagName+"@"+n));for(var i=e.length-1;r<i;)e[r]=e[++r];if(e.length=i,t){var o=t.ownerDocument;o&&($(o,t,n),n.ownerElement=null)}}function j(){}function z(){}function F(t){return("<"==t?"&lt;":">"==t&&"&gt;")||"&"==t&&"&amp;"||'"'==t&&"&quot;"||"&#"+t.charCodeAt()+";"}function U(t,e){if(e(t))return!0;if(t=t.firstChild)do{if(U(t,e))return!0}while(t=t.nextSibling)}function q(){this.ownerDocument=this}function $(t,e,n,r){t&&t._inc++,n.namespaceURI===o.XMLNS&&delete e._nsMap[n.prefix?n.localName:""]}function B(t,e,n){if(t&&t._inc){t._inc++;var r=e.childNodes;if(n)r[r.length++]=n;else{for(var i=e.firstChild,o=0;i;)r[o++]=i,i=i.nextSibling;r.length=o,delete r[r.length]}}}function H(t,e){var n=e.previousSibling,r=e.nextSibling;return n?n.nextSibling=r:t.firstChild=r,r?r.previousSibling=n:t.lastChild=n,e.parentNode=null,e.previousSibling=null,e.nextSibling=null,B(t.ownerDocument,t),e}function W(t){return t&&t.nodeType===z.DOCUMENT_TYPE_NODE}function V(t){return t&&t.nodeType===z.ELEMENT_NODE}function G(t){return t&&t.nodeType===z.TEXT_NODE}function X(t,e){var n=t.childNodes||[];if(i(n,V)||W(e))return!1;var r=i(n,W);return!(e&&r&&n.indexOf(r)>n.indexOf(e))}function Z(t,e){var n=t.childNodes||[];if(i(n,(function(t){return V(t)&&t!==e})))return!1;var r=i(n,W);return!(e&&r&&n.indexOf(r)>n.indexOf(e))}function Y(t,e,n){var r=t.childNodes||[],o=e.childNodes||[];if(e.nodeType===z.DOCUMENT_FRAGMENT_NODE){var a=o.filter(V);if(a.length>1||i(o,G))throw new k(T,"More than one element or text in fragment");if(1===a.length&&!X(t,n))throw new k(T,"Element in fragment can not be inserted before doctype")}if(V(e)&&!X(t,n))throw new k(T,"Only one element can be added and only after doctype");if(W(e)){if(i(r,W))throw new k(T,"Only one doctype is allowed");var s=i(r,V);if(n&&r.indexOf(s)<r.indexOf(n))throw new k(T,"Doctype can only be inserted before an element");if(!n&&s)throw new k(T,"Doctype can not be appended since element is present")}}function Q(t,e,n){var r=t.childNodes||[],o=e.childNodes||[];if(e.nodeType===z.DOCUMENT_FRAGMENT_NODE){var a=o.filter(V);if(a.length>1||i(o,G))throw new k(T,"More than one element or text in fragment");if(1===a.length&&!Z(t,n))throw new k(T,"Element in fragment can not be inserted before doctype")}if(V(e)&&!Z(t,n))throw new k(T,"Only one element can be added and only after doctype");if(W(e)){if(i(r,(function(t){return W(t)&&t!==n})))throw new k(T,"Only one doctype is allowed");var s=i(r,V);if(n&&r.indexOf(s)<r.indexOf(n))throw new k(T,"Doctype can only be inserted before an element")}}function K(t,e,n,r){(function(t,e,n){if(!function(t){return t&&(t.nodeType===z.DOCUMENT_NODE||t.nodeType===z.DOCUMENT_FRAGMENT_NODE||t.nodeType===z.ELEMENT_NODE)}(t))throw new k(T,"Unexpected parent node type "+t.nodeType);if(n&&n.parentNode!==t)throw new k(O,"child not in parent");if(!function(t){return t&&(V(t)||G(t)||W(t)||t.nodeType===z.DOCUMENT_FRAGMENT_NODE||t.nodeType===z.COMMENT_NODE||t.nodeType===z.PROCESSING_INSTRUCTION_NODE)}(e)||W(e)&&t.nodeType!==z.DOCUMENT_NODE)throw new k(T,"Unexpected node type "+e.nodeType+" for parent node type "+t.nodeType)})(t,e,n),t.nodeType===z.DOCUMENT_NODE&&(r||Y)(t,e,n);var i=e.parentNode;if(i&&i.removeChild(e),e.nodeType===x){var o=e.firstChild;if(null==o)return e;var a=e.lastChild}else o=a=e;var s=n?n.previousSibling:t.lastChild;o.previousSibling=s,a.nextSibling=n,s?s.nextSibling=o:t.firstChild=o,null==n?t.lastChild=a:n.previousSibling=a;do{o.parentNode=t}while(o!==a&&(o=o.nextSibling));return B(t.ownerDocument||t,t),e.nodeType==x&&(e.firstChild=e.lastChild=null),e}function J(){this._nsMap={}}function tt(){}function et(){}function nt(){}function rt(){}function it(){}function ot(){}function at(){}function st(){}function ht(){}function ct(){}function ut(){}function lt(){}function ft(t,e){var n=[],r=9==this.nodeType&&this.documentElement||this,i=r.prefix,o=r.namespaceURI;if(o&&null==i&&null==(i=r.lookupPrefix(o)))var a=[{namespace:o,prefix:null}];return mt(this,n,t,e,a),n.join("")}function dt(t,e,n){var r=t.prefix||"",i=t.namespaceURI;if(!i)return!1;if("xml"===r&&i===o.XML||i===o.XMLNS)return!1;for(var a=n.length;a--;){var s=n[a];if(s.prefix===r)return s.namespace!==i}return!0}function pt(t,e,n){t.push(" ",e,'="',n.replace(/[<>&"\t\n\r]/g,F),'"')}function mt(t,e,n,r,i){if(i||(i=[]),r){if(!(t=r(t)))return;if("string"==typeof t)return void e.push(t)}switch(t.nodeType){case f:var a=t.attributes,s=a.length,h=t.firstChild,c=t.tagName,u=c;if(!(n=o.isHTML(t.namespaceURI)||n)&&!t.prefix&&t.namespaceURI){for(var l,y=0;y<a.length;y++)if("xmlns"===a.item(y).name){l=a.item(y).value;break}if(!l)for(var M=i.length-1;M>=0;M--)if(""===(N=i[M]).prefix&&N.namespace===t.namespaceURI){l=N.namespace;break}if(l!==t.namespaceURI)for(M=i.length-1;M>=0;M--){var N;if((N=i[M]).namespace===t.namespaceURI){N.prefix&&(u=N.prefix+":"+c);break}}}e.push("<",u);for(var E=0;E<s;E++)"xmlns"==(T=a.item(E)).prefix?i.push({prefix:T.localName,namespace:T.value}):"xmlns"==T.nodeName&&i.push({prefix:"",namespace:T.value});for(E=0;E<s;E++){var T,O,S;dt(T=a.item(E),0,i)&&(pt(e,(O=T.prefix||"")?"xmlns:"+O:"xmlns",S=T.namespaceURI),i.push({prefix:O,namespace:S})),mt(T,e,n,r,i)}if(c===u&&dt(t,0,i)&&(pt(e,(O=t.prefix||"")?"xmlns:"+O:"xmlns",S=t.namespaceURI),i.push({prefix:O,namespace:S})),h||n&&!/^(?:meta|link|img|br|hr|input)$/i.test(c)){if(e.push(">"),n&&/^script$/i.test(c))for(;h;)h.data?e.push(h.data):mt(h,e,n,r,i.slice()),h=h.nextSibling;else for(;h;)mt(h,e,n,r,i.slice()),h=h.nextSibling;e.push("</",u,">")}else e.push("/>");return;case _:case x:for(h=t.firstChild;h;)mt(h,e,n,r,i.slice()),h=h.nextSibling;return;case d:return pt(e,t.name,t.value);case p:return e.push(t.data.replace(/[<&>]/g,F));case m:return e.push("<![CDATA[",t.data,"]]>");case v:return e.push("\x3c!--",t.data,"--\x3e");case w:var k=t.publicId,A=t.systemId;if(e.push("<!DOCTYPE ",t.name),k)e.push(" PUBLIC ",k),A&&"."!=A&&e.push(" ",A),e.push(">");else if(A&&"."!=A)e.push(" SYSTEM ",A,">");else{var D=t.internalSubset;D&&e.push(" [",D,"]"),e.push(">")}return;case b:return e.push("<?",t.target," ",t.data,"?>");case g:return e.push("&",t.nodeName,";");default:e.push("??",t.nodeName)}}function gt(t,e,n){var r;switch(e.nodeType){case f:(r=e.cloneNode(!1)).ownerDocument=t;case x:break;case d:n=!0}if(r||(r=e.cloneNode(!1)),r.ownerDocument=t,r.parentNode=null,n)for(var i=e.firstChild;i;)r.appendChild(gt(t,i,n)),i=i.nextSibling;return r}function yt(t,e,n){var r=new e.constructor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var o=e[i];"object"!=typeof o&&o!=r[i]&&(r[i]=o)}switch(e.childNodes&&(r.childNodes=new A),r.ownerDocument=t,r.nodeType){case f:var a=e.attributes,s=r.attributes=new C,h=a.length;s._ownerElement=r;for(var c=0;c<h;c++)r.setAttributeNode(yt(t,a.item(c),!0));break;case d:n=!0}if(n)for(var u=e.firstChild;u;)r.appendChild(yt(t,u,n)),u=u.nextSibling;return r}function bt(t,e,n){t[e]=n}N.INVALID_STATE_ERR=(E[11]="Invalid state",11),N.SYNTAX_ERR=(E[12]="Syntax error",12),N.INVALID_MODIFICATION_ERR=(E[13]="Invalid modification",13),N.NAMESPACE_ERR=(E[14]="Invalid namespace",14),N.INVALID_ACCESS_ERR=(E[15]="Invalid access",15),k.prototype=Error.prototype,c(N,k),A.prototype={length:0,item:function(t){return this[t]||null},toString:function(t,e){for(var n=[],r=0;r<this.length;r++)mt(this[r],n,t,e);return n.join("")},filter:function(t){return Array.prototype.filter.call(this,t)},indexOf:function(t){return Array.prototype.indexOf.call(this,t)}},D.prototype.item=function(t){return I(this),this[t]},u(D,A),C.prototype={length:0,item:A.prototype.item,getNamedItem:function(t){for(var e=this.length;e--;){var n=this[e];if(n.nodeName==t)return n}},setNamedItem:function(t){var e=t.ownerElement;if(e&&e!=this._ownerElement)throw new k(S);var n=this.getNamedItem(t.nodeName);return L(this._ownerElement,this,t,n),n},setNamedItemNS:function(t){var e,n=t.ownerElement;if(n&&n!=this._ownerElement)throw new k(S);return e=this.getNamedItemNS(t.namespaceURI,t.localName),L(this._ownerElement,this,t,e),e},removeNamedItem:function(t){var e=this.getNamedItem(t);return R(this._ownerElement,this,e),e},removeNamedItemNS:function(t,e){var n=this.getNamedItemNS(t,e);return R(this._ownerElement,this,n),n},getNamedItemNS:function(t,e){for(var n=this.length;n--;){var r=this[n];if(r.localName==e&&r.namespaceURI==t)return r}return null}},j.prototype={hasFeature:function(t,e){return!0},createDocument:function(t,e,n){var r=new q;if(r.implementation=this,r.childNodes=new A,r.doctype=n||null,n&&r.appendChild(n),e){var i=r.createElementNS(t,e);r.appendChild(i)}return r},createDocumentType:function(t,e,n){var r=new ot;return r.name=t,r.nodeName=t,r.publicId=e||"",r.systemId=n||"",r}},z.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,insertBefore:function(t,e){return K(this,t,e)},replaceChild:function(t,e){K(this,t,e,Q),e&&this.removeChild(e)},removeChild:function(t){return H(this,t)},appendChild:function(t){return this.insertBefore(t,null)},hasChildNodes:function(){return null!=this.firstChild},cloneNode:function(t){return yt(this.ownerDocument||this,this,t)},normalize:function(){for(var t=this.firstChild;t;){var e=t.nextSibling;e&&e.nodeType==p&&t.nodeType==p?(this.removeChild(e),t.appendData(e.data)):(t.normalize(),t=e)}},isSupported:function(t,e){return this.ownerDocument.implementation.hasFeature(t,e)},hasAttributes:function(){return this.attributes.length>0},lookupPrefix:function(t){for(var e=this;e;){var n=e._nsMap;if(n)for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r)&&n[r]===t)return r;e=e.nodeType==d?e.ownerDocument:e.parentNode}return null},lookupNamespaceURI:function(t){for(var e=this;e;){var n=e._nsMap;if(n&&Object.prototype.hasOwnProperty.call(n,t))return n[t];e=e.nodeType==d?e.ownerDocument:e.parentNode}return null},isDefaultNamespace:function(t){return null==this.lookupPrefix(t)}},c(l,z),c(l,z.prototype),q.prototype={nodeName:"#document",nodeType:_,doctype:null,documentElement:null,_inc:1,insertBefore:function(t,e){if(t.nodeType==x){for(var n=t.firstChild;n;){var r=n.nextSibling;this.insertBefore(n,e),n=r}return t}return K(this,t,e),t.ownerDocument=this,null===this.documentElement&&t.nodeType===f&&(this.documentElement=t),t},removeChild:function(t){return this.documentElement==t&&(this.documentElement=null),H(this,t)},replaceChild:function(t,e){K(this,t,e,Q),t.ownerDocument=this,e&&this.removeChild(e),V(t)&&(this.documentElement=t)},importNode:function(t,e){return gt(this,t,e)},getElementById:function(t){var e=null;return U(this.documentElement,(function(n){if(n.nodeType==f&&n.getAttribute("id")==t)return e=n,!0})),e},getElementsByClassName:function(t){var e=h(t);return new D(this,(function(n){var r=[];return e.length>0&&U(n.documentElement,(function(i){if(i!==n&&i.nodeType===f){var o=i.getAttribute("class");if(o){var a=t===o;if(!a){var s=h(o);a=e.every((c=s,function(t){return c&&-1!==c.indexOf(t)}))}a&&r.push(i)}}var c})),r}))},createElement:function(t){var e=new J;return e.ownerDocument=this,e.nodeName=t,e.tagName=t,e.localName=t,e.childNodes=new A,(e.attributes=new C)._ownerElement=e,e},createDocumentFragment:function(){var t=new ct;return t.ownerDocument=this,t.childNodes=new A,t},createTextNode:function(t){var e=new nt;return e.ownerDocument=this,e.appendData(t),e},createComment:function(t){var e=new rt;return e.ownerDocument=this,e.appendData(t),e},createCDATASection:function(t){var e=new it;return e.ownerDocument=this,e.appendData(t),e},createProcessingInstruction:function(t,e){var n=new ut;return n.ownerDocument=this,n.tagName=n.target=t,n.nodeValue=n.data=e,n},createAttribute:function(t){var e=new tt;return e.ownerDocument=this,e.name=t,e.nodeName=t,e.localName=t,e.specified=!0,e},createEntityReference:function(t){var e=new ht;return e.ownerDocument=this,e.nodeName=t,e},createElementNS:function(t,e){var n=new J,r=e.split(":"),i=n.attributes=new C;return n.childNodes=new A,n.ownerDocument=this,n.nodeName=e,n.tagName=e,n.namespaceURI=t,2==r.length?(n.prefix=r[0],n.localName=r[1]):n.localName=e,i._ownerElement=n,n},createAttributeNS:function(t,e){var n=new tt,r=e.split(":");return n.ownerDocument=this,n.nodeName=e,n.name=e,n.namespaceURI=t,n.specified=!0,2==r.length?(n.prefix=r[0],n.localName=r[1]):n.localName=e,n}},u(q,z),J.prototype={nodeType:f,hasAttribute:function(t){return null!=this.getAttributeNode(t)},getAttribute:function(t){var e=this.getAttributeNode(t);return e&&e.value||""},getAttributeNode:function(t){return this.attributes.getNamedItem(t)},setAttribute:function(t,e){var n=this.ownerDocument.createAttribute(t);n.value=n.nodeValue=""+e,this.setAttributeNode(n)},removeAttribute:function(t){var e=this.getAttributeNode(t);e&&this.removeAttributeNode(e)},appendChild:function(t){return t.nodeType===x?this.insertBefore(t,null):function(t,e){return e.parentNode&&e.parentNode.removeChild(e),e.parentNode=t,e.previousSibling=t.lastChild,e.nextSibling=null,e.previousSibling?e.previousSibling.nextSibling=e:t.firstChild=e,t.lastChild=e,B(t.ownerDocument,t,e),e}(this,t)},setAttributeNode:function(t){return this.attributes.setNamedItem(t)},setAttributeNodeNS:function(t){return this.attributes.setNamedItemNS(t)},removeAttributeNode:function(t){return this.attributes.removeNamedItem(t.nodeName)},removeAttributeNS:function(t,e){var n=this.getAttributeNodeNS(t,e);n&&this.removeAttributeNode(n)},hasAttributeNS:function(t,e){return null!=this.getAttributeNodeNS(t,e)},getAttributeNS:function(t,e){var n=this.getAttributeNodeNS(t,e);return n&&n.value||""},setAttributeNS:function(t,e,n){var r=this.ownerDocument.createAttributeNS(t,e);r.value=r.nodeValue=""+n,this.setAttributeNode(r)},getAttributeNodeNS:function(t,e){return this.attributes.getNamedItemNS(t,e)},getElementsByTagName:function(t){return new D(this,(function(e){var n=[];return U(e,(function(r){r===e||r.nodeType!=f||"*"!==t&&r.tagName!=t||n.push(r)})),n}))},getElementsByTagNameNS:function(t,e){return new D(this,(function(n){var r=[];return U(n,(function(i){i===n||i.nodeType!==f||"*"!==t&&i.namespaceURI!==t||"*"!==e&&i.localName!=e||r.push(i)})),r}))}},q.prototype.getElementsByTagName=J.prototype.getElementsByTagName,q.prototype.getElementsByTagNameNS=J.prototype.getElementsByTagNameNS,u(J,z),tt.prototype.nodeType=d,u(tt,z),et.prototype={data:"",substringData:function(t,e){return this.data.substring(t,t+e)},appendData:function(t){t=this.data+t,this.nodeValue=this.data=t,this.length=t.length},insertData:function(t,e){this.replaceData(t,0,e)},appendChild:function(t){throw new Error(E[T])},deleteData:function(t,e){this.replaceData(t,e,"")},replaceData:function(t,e,n){n=this.data.substring(0,t)+n+this.data.substring(t+e),this.nodeValue=this.data=n,this.length=n.length}},u(et,z),nt.prototype={nodeName:"#text",nodeType:p,splitText:function(t){var e=this.data,n=e.substring(t);e=e.substring(0,t),this.data=this.nodeValue=e,this.length=e.length;var r=this.ownerDocument.createTextNode(n);return this.parentNode&&this.parentNode.insertBefore(r,this.nextSibling),r}},u(nt,et),rt.prototype={nodeName:"#comment",nodeType:v},u(rt,et),it.prototype={nodeName:"#cdata-section",nodeType:m},u(it,et),ot.prototype.nodeType=w,u(ot,z),at.prototype.nodeType=M,u(at,z),st.prototype.nodeType=y,u(st,z),ht.prototype.nodeType=g,u(ht,z),ct.prototype.nodeName="#document-fragment",ct.prototype.nodeType=x,u(ct,z),ut.prototype.nodeType=b,u(ut,z),lt.prototype.serializeToString=function(t,e,n){return ft.call(t,e,n)},z.prototype.toString=ft;try{if(Object.defineProperty){function vt(t){switch(t.nodeType){case f:case x:var e=[];for(t=t.firstChild;t;)7!==t.nodeType&&8!==t.nodeType&&e.push(vt(t)),t=t.nextSibling;return e.join("");default:return t.nodeValue}}Object.defineProperty(D.prototype,"length",{get:function(){return I(this),this.$$length}}),Object.defineProperty(z.prototype,"textContent",{get:function(){return vt(this)},set:function(t){switch(this.nodeType){case f:case x:for(;this.firstChild;)this.removeChild(this.firstChild);(t||String(t))&&this.appendChild(this.ownerDocument.createTextNode(t));break;default:this.data=t,this.value=t,this.nodeValue=t}}}),bt=function(t,e,n){t["$$"+e]=n}}}catch(_t){}e.DocumentType=ot,e.DOMException=k,e.DOMImplementation=j,e.Element=J,e.Node=z,e.NodeList=A,e.XMLSerializer=lt},45:(t,e,n)=>{var r=n(167).freeze;e.XML_ENTITIES=r({amp:"&",apos:"'",gt:">",lt:"<",quot:'"'}),e.HTML_ENTITIES=r({lt:"<",gt:">",amp:"&",quot:'"',apos:"'",Agrave:"À",Aacute:"Á",Acirc:"Â",Atilde:"Ã",Auml:"Ä",Aring:"Å",AElig:"Æ",Ccedil:"Ç",Egrave:"È",Eacute:"É",Ecirc:"Ê",Euml:"Ë",Igrave:"Ì",Iacute:"Í",Icirc:"Î",Iuml:"Ï",ETH:"Ð",Ntilde:"Ñ",Ograve:"Ò",Oacute:"Ó",Ocirc:"Ô",Otilde:"Õ",Ouml:"Ö",Oslash:"Ø",Ugrave:"Ù",Uacute:"Ú",Ucirc:"Û",Uuml:"Ü",Yacute:"Ý",THORN:"Þ",szlig:"ß",agrave:"à",aacute:"á",acirc:"â",atilde:"ã",auml:"ä",aring:"å",aelig:"æ",ccedil:"ç",egrave:"è",eacute:"é",ecirc:"ê",euml:"ë",igrave:"ì",iacute:"í",icirc:"î",iuml:"ï",eth:"ð",ntilde:"ñ",ograve:"ò",oacute:"ó",ocirc:"ô",otilde:"õ",ouml:"ö",oslash:"ø",ugrave:"ù",uacute:"ú",ucirc:"û",uuml:"ü",yacute:"ý",thorn:"þ",yuml:"ÿ",nbsp:" ",iexcl:"¡",cent:"¢",pound:"£",curren:"¤",yen:"¥",brvbar:"¦",sect:"§",uml:"¨",copy:"©",ordf:"ª",laquo:"«",not:"¬",shy:"­­",reg:"®",macr:"¯",deg:"°",plusmn:"±",sup2:"²",sup3:"³",acute:"´",micro:"µ",para:"¶",middot:"·",cedil:"¸",sup1:"¹",ordm:"º",raquo:"»",frac14:"¼",frac12:"½",frac34:"¾",iquest:"¿",times:"×",divide:"÷",forall:"∀",part:"∂",exist:"∃",empty:"∅",nabla:"∇",isin:"∈",notin:"∉",ni:"∋",prod:"∏",sum:"∑",minus:"−",lowast:"∗",radic:"√",prop:"∝",infin:"∞",ang:"∠",and:"∧",or:"∨",cap:"∩",cup:"∪",int:"∫",there4:"∴",sim:"∼",cong:"≅",asymp:"≈",ne:"≠",equiv:"≡",le:"≤",ge:"≥",sub:"⊂",sup:"⊃",nsub:"⊄",sube:"⊆",supe:"⊇",oplus:"⊕",otimes:"⊗",perp:"⊥",sdot:"⋅",Alpha:"Α",Beta:"Β",Gamma:"Γ",Delta:"Δ",Epsilon:"Ε",Zeta:"Ζ",Eta:"Η",Theta:"Θ",Iota:"Ι",Kappa:"Κ",Lambda:"Λ",Mu:"Μ",Nu:"Ν",Xi:"Ξ",Omicron:"Ο",Pi:"Π",Rho:"Ρ",Sigma:"Σ",Tau:"Τ",Upsilon:"Υ",Phi:"Φ",Chi:"Χ",Psi:"Ψ",Omega:"Ω",alpha:"α",beta:"β",gamma:"γ",delta:"δ",epsilon:"ε",zeta:"ζ",eta:"η",theta:"θ",iota:"ι",kappa:"κ",lambda:"λ",mu:"μ",nu:"ν",xi:"ξ",omicron:"ο",pi:"π",rho:"ρ",sigmaf:"ς",sigma:"σ",tau:"τ",upsilon:"υ",phi:"φ",chi:"χ",psi:"ψ",omega:"ω",thetasym:"ϑ",upsih:"ϒ",piv:"ϖ",OElig:"Œ",oelig:"œ",Scaron:"Š",scaron:"š",Yuml:"Ÿ",fnof:"ƒ",circ:"ˆ",tilde:"˜",ensp:" ",emsp:" ",thinsp:" ",zwnj:"‌",zwj:"‍",lrm:"‎",rlm:"‏",ndash:"–",mdash:"—",lsquo:"‘",rsquo:"’",sbquo:"‚",ldquo:"“",rdquo:"”",bdquo:"„",dagger:"†",Dagger:"‡",bull:"•",hellip:"…",permil:"‰",prime:"′",Prime:"″",lsaquo:"‹",rsaquo:"›",oline:"‾",euro:"€",trade:"™",larr:"←",uarr:"↑",rarr:"→",darr:"↓",harr:"↔",crarr:"↵",lceil:"⌈",rceil:"⌉",lfloor:"⌊",rfloor:"⌋",loz:"◊",spades:"♠",clubs:"♣",hearts:"♥",diams:"♦"}),e.entityMap=e.HTML_ENTITIES},969:(t,e,n)=>{var r=n(146);e.DOMImplementation=r.DOMImplementation,e.XMLSerializer=r.XMLSerializer,e.DOMParser=n(129).DOMParser},925:(t,e,n)=>{var r=n(167).NAMESPACE,i=/[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,o=new RegExp("[\\-\\.0-9"+i.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]"),a=new RegExp("^"+i.source+o.source+"*(?::"+i.source+o.source+"*)?$");function s(t,e){this.message=t,this.locator=e,Error.captureStackTrace&&Error.captureStackTrace(this,s)}function h(){}function c(t,e){return e.lineNumber=t.lineNumber,e.columnNumber=t.columnNumber,e}function u(t,e,n,i,o,a){function s(t,e,r){n.attributeNames.hasOwnProperty(t)&&a.fatalError("Attribute "+t+" redefined"),n.addValue(t,e.replace(/[\t\n\r]/g," ").replace(/&#?\w+;/g,o),r)}for(var h,c=++e,u=0;;){var l=t.charAt(c);switch(l){case"=":if(1===u)h=t.slice(e,c),u=3;else{if(2!==u)throw new Error("attribute equal must after attrName");u=3}break;case"'":case'"':if(3===u||1===u){if(1===u&&(a.warning('attribute value must after "="'),h=t.slice(e,c)),e=c+1,!((c=t.indexOf(l,e))>0))throw new Error("attribute value no end '"+l+"' match");s(h,f=t.slice(e,c),e-1),u=5}else{if(4!=u)throw new Error('attribute value must after "="');s(h,f=t.slice(e,c),e),a.warning('attribute "'+h+'" missed start quot('+l+")!!"),e=c+1,u=5}break;case"/":switch(u){case 0:n.setTagName(t.slice(e,c));case 5:case 6:case 7:u=7,n.closed=!0;case 4:case 1:case 2:break;default:throw new Error("attribute invalid close char('/')")}break;case"":return a.error("unexpected end of input"),0==u&&n.setTagName(t.slice(e,c)),c;case">":switch(u){case 0:n.setTagName(t.slice(e,c));case 5:case 6:case 7:break;case 4:case 1:"/"===(f=t.slice(e,c)).slice(-1)&&(n.closed=!0,f=f.slice(0,-1));case 2:2===u&&(f=h),4==u?(a.warning('attribute "'+f+'" missed quot(")!'),s(h,f,e)):(r.isHTML(i[""])&&f.match(/^(?:disabled|checked|selected)$/i)||a.warning('attribute "'+f+'" missed value!! "'+f+'" instead!!'),s(f,f,e));break;case 3:throw new Error("attribute value missed!!")}return c;case"":l=" ";default:if(l<=" ")switch(u){case 0:n.setTagName(t.slice(e,c)),u=6;break;case 1:h=t.slice(e,c),u=2;break;case 4:var f=t.slice(e,c);a.warning('attribute "'+f+'" missed quot(")!!'),s(h,f,e);case 5:u=6}else switch(u){case 2:n.tagName,r.isHTML(i[""])&&h.match(/^(?:disabled|checked|selected)$/i)||a.warning('attribute "'+h+'" missed value!! "'+h+'" instead2!!'),s(h,h,e),e=c,u=1;break;case 5:a.warning('attribute space is required"'+h+'"!!');case 6:u=1,e=c;break;case 3:u=4,e=c;break;case 7:throw new Error("elements closed character '/' and '>' must be connected to")}}c++}}function l(t,e,n){for(var i=t.tagName,o=null,a=t.length;a--;){var s=t[a],h=s.qName,c=s.value;if((d=h.indexOf(":"))>0)var u=s.prefix=h.slice(0,d),l=h.slice(d+1),f="xmlns"===u&&l;else l=h,u=null,f="xmlns"===h&&"";s.localName=l,!1!==f&&(null==o&&(o={},p(n,n={})),n[f]=o[f]=c,s.uri=r.XMLNS,e.startPrefixMapping(f,c))}for(a=t.length;a--;)(u=(s=t[a]).prefix)&&("xml"===u&&(s.uri=r.XML),"xmlns"!==u&&(s.uri=n[u||""]));var d;(d=i.indexOf(":"))>0?(u=t.prefix=i.slice(0,d),l=t.localName=i.slice(d+1)):(u=null,l=t.localName=i);var m=t.uri=n[u||""];if(e.startElement(m,l,i,t),!t.closed)return t.currentNSMap=n,t.localNSMap=o,!0;if(e.endElement(m,l,i),o)for(u in o)Object.prototype.hasOwnProperty.call(o,u)&&e.endPrefixMapping(u)}function f(t,e,n,r,i){if(/^(?:script|textarea)$/i.test(n)){var o=t.indexOf("</"+n+">",e),a=t.substring(e+1,o);if(/[&<]/.test(a))return/^script$/i.test(n)?(i.characters(a,0,a.length),o):(a=a.replace(/&#?\w+;/g,r),i.characters(a,0,a.length),o)}return e+1}function d(t,e,n,r){var i=r[n];return null==i&&((i=t.lastIndexOf("</"+n+">"))<e&&(i=t.lastIndexOf("</"+n)),r[n]=i),i<e}function p(t,e){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}function m(t,e,n,r){if("-"===t.charAt(e+2))return"-"===t.charAt(e+3)?(i=t.indexOf("--\x3e",e+4))>e?(n.comment(t,e+4,i-e-4),i+3):(r.error("Unclosed comment"),-1):-1;if("CDATA["==t.substr(e+3,6)){var i=t.indexOf("]]>",e+9);return n.startCDATA(),n.characters(t,e+9,i-e-9),n.endCDATA(),i+3}var o=function(t,e){var n,r=[],i=/'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;for(i.lastIndex=e,i.exec(t);n=i.exec(t);)if(r.push(n),n[1])return r}(t,e),a=o.length;if(a>1&&/!doctype/i.test(o[0][0])){var s=o[1][0],h=!1,c=!1;a>3&&(/^public$/i.test(o[2][0])?(h=o[3][0],c=a>4&&o[4][0]):/^system$/i.test(o[2][0])&&(c=o[3][0]));var u=o[a-1];return n.startDTD(s,h,c),n.endDTD(),u.index+u[0].length}return-1}function g(t,e,n){var r=t.indexOf("?>",e);if(r){var i=t.substring(e,r).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);return i?(i[0].length,n.processingInstruction(i[1],i[2]),r+2):-1}return-1}function y(){this.attributeNames={}}s.prototype=new Error,s.prototype.name=s.name,h.prototype={parse:function(t,e,n){var i=this.domBuilder;i.startDocument(),p(e,e={}),function(t,e,n,i,o){function a(t){var e=t.slice(1,-1);return Object.hasOwnProperty.call(n,e)?n[e]:"#"===e.charAt(0)?function(t){if(t>65535){var e=55296+((t-=65536)>>10),n=56320+(1023&t);return String.fromCharCode(e,n)}return String.fromCharCode(t)}(parseInt(e.substr(1).replace("x","0x"))):(o.error("entity not found:"+t),t)}function h(e){if(e>N){var n=t.substring(N,e).replace(/&#?\w+;/g,a);w&&p(N),i.characters(n,0,e-N),N=e}}function p(e,n){for(;e>=v&&(n=_.exec(t));)b=n.index,v=b+n[0].length,w.lineNumber++;w.columnNumber=e-b+1}for(var b=0,v=0,_=/.*(?:\r\n?|\n)|.*$/g,w=i.locator,x=[{currentNSMap:e}],M={},N=0;;){try{var E=t.indexOf("<",N);if(E<0){if(!t.substr(N).match(/^\s*$/)){var T=i.doc,O=T.createTextNode(t.substr(N));T.appendChild(O),i.currentElement=O}return}switch(E>N&&h(E),t.charAt(E+1)){case"/":var S=t.indexOf(">",E+3),k=t.substring(E+2,S).replace(/[ \t\n\r]+$/g,""),A=x.pop();S<0?(k=t.substring(E+2).replace(/[\s<].*/,""),o.error("end tag name: "+k+" is not complete:"+A.tagName),S=E+1+k.length):k.match(/\s</)&&(k=k.replace(/[\s<].*/,""),o.error("end tag name: "+k+" maybe not complete"),S=E+1+k.length);var D=A.localNSMap,I=A.tagName==k;if(I||A.tagName&&A.tagName.toLowerCase()==k.toLowerCase()){if(i.endElement(A.uri,A.localName,k),D)for(var C in D)Object.prototype.hasOwnProperty.call(D,C)&&i.endPrefixMapping(C);I||o.fatalError("end tag name: "+k+" is not match the current start tagName:"+A.tagName)}else x.push(A);S++;break;case"?":w&&p(E),S=g(t,E,i);break;case"!":w&&p(E),S=m(t,E,i,o);break;default:w&&p(E);var P=new y,L=x[x.length-1].currentNSMap,R=(S=u(t,E,P,L,a,o),P.length);if(!P.closed&&d(t,S,P.tagName,M)&&(P.closed=!0,n.nbsp||o.warning("unclosed xml attribute")),w&&R){for(var j=c(w,{}),z=0;z<R;z++){var F=P[z];p(F.offset),F.locator=c(w,{})}i.locator=j,l(P,i,L)&&x.push(P),i.locator=w}else l(P,i,L)&&x.push(P);r.isHTML(P.uri)&&!P.closed?S=f(t,S,P.tagName,a,i):S++}}catch(t){if(t instanceof s)throw t;o.error("element parse error: "+t),S=-1}S>N?N=S:h(Math.max(E,N)+1)}}(t,e,n,i,this.errorHandler),i.endDocument()}},y.prototype={setTagName:function(t){if(!a.test(t))throw new Error("invalid tagName:"+t);this.tagName=t},addValue:function(t,e,n){if(!a.test(t))throw new Error("invalid attribute:"+t);this.attributeNames[t]=this.length,this[this.length++]={qName:t,value:e,offset:n}},length:0,getLocalName:function(t){return this[t].localName},getLocator:function(t){return this[t].locator},getQName:function(t){return this[t].qName},getURI:function(t){return this[t].uri},getValue:function(t){return this[t].value}},e.XMLReader=h,e.ParseError=s},367:(t,e,n)=>{"use strict";function r(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return i(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,s=!0,h=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return s=t.done,t},e:function(t){h=!0,a=t},f:function(){try{s||null==n.return||n.return()}finally{if(h)throw a}}}}function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}n.r(e),n.d(e,{drawAutomated:()=>s,drawAutomatedOtherItems:()=>c,drawAutomatedStackFrames:()=>h,getSize:()=>l,separateObjects:()=>u});var o=n(877).MemoryModel,a=n(500).config;function s(t,e,n){var r=u(t),i=r.stack_frames,a=r.other_items,s=h(i,n),l=s.StackFrames,f=s.requiredHeight,d=s.requiredWidth,p=c(a,e,n.sort_by,n,d),m=p.objs,g=p.canvas_height,y=Math.max(g,f)+100,b=new o({width:e,height:y});return b.drawAll(l),b.drawAll(m),b}function h(t,e){for(var n=0,i=["padding","top_margin","left_margin","bottom_margin","right_margin"];n<i.length;n++){var o=i[n];e.hasOwnProperty(o)||(e[o]=a.obj_x_padding)}var s,h=e.top_margin,c=0,u=[],f=r(t);try{for(f.s();!(s=f.n()).done;){var d=s.value,p=void 0,m=void 0;if("BLANK"!==d.name){var g=l(d);m=g.height,p=g.width}else m=d.height,p=d.width;p>c&&(c=p),"BLANK"!==d.name&&(d.x=e.left_margin,d.y=h,u.push(d)),h=m+h}}catch(t){f.e(t)}finally{f.f()}return{StackFrames:u,requiredHeight:h,requiredWidth:c+=e.padding}}function c(t,e,n){for(var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=arguments.length>4?arguments[4]:void 0,s=0,h=["padding","top_margin","left_margin","bottom_margin","right_margin"];s<h.length;s++){var c=h[s];i.hasOwnProperty(c)||(i[c]=a.obj_x_padding)}var u=i.padding;void 0===o&&(o=.2*e);var p,m,g=o+u,y=r(t);try{for(y.s();!(p=y.n()).done;){var b=p.value;if("BLANK"!==b.name){var v=l(b);b.height=v.height,b.width=v.width}}}catch(t){y.e(t)}finally{y.f()}switch(n){case"height":m=f;break;case"id":m=d}null!==n&&t.sort(m);var _,w,x=g,M=i.top_margin,N=[],E=r(t);try{for(E.s();!(w=E.n()).done;){var T=w.value,O=x+T.width+u;O<e?(T.x=x,T.y=M,N.push(T)):(_=N.reduce((function(t,e){return t.height>=e.height?t:e})).height+u,N=[],x=g,M+=_,T.x=x,T.y=M,T.rowBreaker=!0,O=x+T.width+u,N.push(T)),x=O}}catch(t){E.e(t)}finally{E.f()}var S=t.reduce((function(t,e){return r=e,-((n=t).x+n.width-(r.x+r.width))<=0?t:e;var n,r})),k=t.reduce((function(t,e){return r=e,-((n=t).y+n.height-(r.y+r.height))<=0?t:e;var n,r})),A=S.x+S.width+i.right_margin,D=k.y+k.height+i.bottom_margin,I=t.filter((function(t){return"BLANK"!==t.name}));return{objs:t=I,canvas_height:D,canvas_width:A}}function u(t){var e,n=[],i=[],o=r(t);try{for(o.s();!(e=o.n()).done;){var a=e.value;"BLANK"!==a.name||void 0!==a.width&&void 0!==a.height?a.stack_frame?n.push(a):i.push(a):console.log("WARNING :: An object with name='BLANK' exists with missing dimension information (either the width or the height is missing). This object will be omitted in the memory model diagram.")}}catch(t){o.e(t)}finally{o.f()}return{stack_frames:n,other_items:i}}function l(t){t.x=t.x||10,t.y=t.y||10;var e=(new o).drawAll([t])[0];return{height:e.height,width:e.width}}function f(t,e){return-(t.height-e.height)}function d(t,e){return t.id-e.id}},500:(t,e,n)=>{"use strict";n.r(e),n.d(e,{config:()=>r});var r={rect_style:{stroke:"rgb(0, 0, 0)"},text_color:"rgb(0, 0, 0)",value_color:"rgb(27, 14, 139)",id_color:"rgb(150, 100, 28)",item_min_width:50,item_min_height:50,obj_min_width:200,obj_min_height:130,prop_min_width:60,prop_min_height:50,obj_x_padding:25,double_rect_sep:6,list_index_sep:20,font_size:20,browser:!1}},877:(t,e,n)=>{"use strict";n.r(e),n.d(e,{MemoryModel:()=>pt});var r=n(147),i=n.n(r);function o(t,e,n){if(t&&t.length){const[r,i]=e,o=Math.PI/180*n,a=Math.cos(o),s=Math.sin(o);t.forEach((t=>{const[e,n]=t;t[0]=(e-r)*a-(n-i)*s+r,t[1]=(e-r)*s+(n-i)*a+i}))}}function a(t){const e=t[0],n=t[1];return Math.sqrt(Math.pow(e[0]-n[0],2)+Math.pow(e[1]-n[1],2))}function s(t,e){const n=e.hachureAngle+90;let r=e.hachureGap;r<0&&(r=4*e.strokeWidth),r=Math.max(r,.1);const i=[0,0];if(n)for(const e of t)o(e,i,n);const a=function(t,e){const n=[];for(const e of t){const t=[...e];t[0].join(",")!==t[t.length-1].join(",")&&t.push([t[0][0],t[0][1]]),t.length>2&&n.push(t)}const r=[];e=Math.max(e,.1);const i=[];for(const t of n)for(let e=0;e<t.length-1;e++){const n=t[e],r=t[e+1];if(n[1]!==r[1]){const t=Math.min(n[1],r[1]);i.push({ymin:t,ymax:Math.max(n[1],r[1]),x:t===n[1]?n[0]:r[0],islope:(r[0]-n[0])/(r[1]-n[1])})}}if(i.sort(((t,e)=>t.ymin<e.ymin?-1:t.ymin>e.ymin?1:t.x<e.x?-1:t.x>e.x?1:t.ymax===e.ymax?0:(t.ymax-e.ymax)/Math.abs(t.ymax-e.ymax))),!i.length)return r;let o=[],a=i[0].ymin;for(;o.length||i.length;){if(i.length){let t=-1;for(let e=0;e<i.length&&!(i[e].ymin>a);e++)t=e;i.splice(0,t+1).forEach((t=>{o.push({s:a,edge:t})}))}if(o=o.filter((t=>!(t.edge.ymax<=a))),o.sort(((t,e)=>t.edge.x===e.edge.x?0:(t.edge.x-e.edge.x)/Math.abs(t.edge.x-e.edge.x))),o.length>1)for(let t=0;t<o.length;t+=2){const e=t+1;if(e>=o.length)break;const n=o[t].edge,i=o[e].edge;r.push([[Math.round(n.x),a],[Math.round(i.x),a]])}a+=e,o.forEach((t=>{t.edge.x=t.edge.x+e*t.edge.islope}))}return r}(t,r);if(n){for(const e of t)o(e,i,-n);!function(t,e,n){const r=[];t.forEach((t=>r.push(...t))),o(r,e,n)}(a,i,-n)}return a}class h{constructor(t){this.helper=t}fillPolygons(t,e){return this._fillPolygons(t,e)}_fillPolygons(t,e){const n=s(t,e);return{type:"fillSketch",ops:this.renderLines(n,e)}}renderLines(t,e){const n=[];for(const r of t)n.push(...this.helper.doubleLineOps(r[0][0],r[0][1],r[1][0],r[1][1],e));return n}}class c extends h{fillPolygons(t,e){let n=e.hachureGap;n<0&&(n=4*e.strokeWidth),n=Math.max(n,.1);const r=s(t,Object.assign({},e,{hachureGap:n})),i=Math.PI/180*e.hachureAngle,o=[],h=.5*n*Math.cos(i),c=.5*n*Math.sin(i);for(const[t,e]of r)a([t,e])&&o.push([[t[0]-h,t[1]+c],[...e]],[[t[0]+h,t[1]-c],[...e]]);return{type:"fillSketch",ops:this.renderLines(o,e)}}}class u extends h{fillPolygons(t,e){const n=this._fillPolygons(t,e),r=Object.assign({},e,{hachureAngle:e.hachureAngle+90}),i=this._fillPolygons(t,r);return n.ops=n.ops.concat(i.ops),n}}class l{constructor(t){this.helper=t}fillPolygons(t,e){const n=s(t,e=Object.assign({},e,{hachureAngle:0}));return this.dotsOnLines(n,e)}dotsOnLines(t,e){const n=[];let r=e.hachureGap;r<0&&(r=4*e.strokeWidth),r=Math.max(r,.1);let i=e.fillWeight;i<0&&(i=e.strokeWidth/2);const o=r/4;for(const s of t){const t=a(s),h=t/r,c=Math.ceil(h)-1,u=t-c*r,l=(s[0][0]+s[1][0])/2-r/4,f=Math.min(s[0][1],s[1][1]);for(let t=0;t<c;t++){const a=f+u+t*r,s=l-o+2*Math.random()*o,h=a-o+2*Math.random()*o,c=this.helper.ellipse(s,h,i,i,e);n.push(...c.ops)}}return{type:"fillSketch",ops:n}}}class f{constructor(t){this.helper=t}fillPolygons(t,e){const n=s(t,e);return{type:"fillSketch",ops:this.dashedLine(n,e)}}dashedLine(t,e){const n=e.dashOffset<0?e.hachureGap<0?4*e.strokeWidth:e.hachureGap:e.dashOffset,r=e.dashGap<0?e.hachureGap<0?4*e.strokeWidth:e.hachureGap:e.dashGap,i=[];return t.forEach((t=>{const o=a(t),s=Math.floor(o/(n+r)),h=(o+r-s*(n+r))/2;let c=t[0],u=t[1];c[0]>u[0]&&(c=t[1],u=t[0]);const l=Math.atan((u[1]-c[1])/(u[0]-c[0]));for(let t=0;t<s;t++){const o=t*(n+r),a=o+n,s=[c[0]+o*Math.cos(l)+h*Math.cos(l),c[1]+o*Math.sin(l)+h*Math.sin(l)],u=[c[0]+a*Math.cos(l)+h*Math.cos(l),c[1]+a*Math.sin(l)+h*Math.sin(l)];i.push(...this.helper.doubleLineOps(s[0],s[1],u[0],u[1],e))}})),i}}class d{constructor(t){this.helper=t}fillPolygons(t,e){const n=e.hachureGap<0?4*e.strokeWidth:e.hachureGap,r=e.zigzagOffset<0?n:e.zigzagOffset,i=s(t,e=Object.assign({},e,{hachureGap:n+r}));return{type:"fillSketch",ops:this.zigzagLines(i,r,e)}}zigzagLines(t,e,n){const r=[];return t.forEach((t=>{const i=a(t),o=Math.round(i/(2*e));let s=t[0],h=t[1];s[0]>h[0]&&(s=t[1],h=t[0]);const c=Math.atan((h[1]-s[1])/(h[0]-s[0]));for(let t=0;t<o;t++){const i=2*t*e,o=2*(t+1)*e,a=Math.sqrt(2*Math.pow(e,2)),h=[s[0]+i*Math.cos(c),s[1]+i*Math.sin(c)],u=[s[0]+o*Math.cos(c),s[1]+o*Math.sin(c)],l=[h[0]+a*Math.cos(c+Math.PI/4),h[1]+a*Math.sin(c+Math.PI/4)];r.push(...this.helper.doubleLineOps(h[0],h[1],l[0],l[1],n),...this.helper.doubleLineOps(l[0],l[1],u[0],u[1],n))}})),r}}const p={};class m{constructor(t){this.seed=t}next(){return this.seed?(2**31-1&(this.seed=Math.imul(48271,this.seed)))/2**31:Math.random()}}const g={A:7,a:7,C:6,c:6,H:1,h:1,L:2,l:2,M:2,m:2,Q:4,q:4,S:4,s:4,T:2,t:2,V:1,v:1,Z:0,z:0};function y(t,e){return t.type===e}function b(t){const e=[],n=function(t){const e=new Array;for(;""!==t;)if(t.match(/^([ \t\r\n,]+)/))t=t.substr(RegExp.$1.length);else if(t.match(/^([aAcChHlLmMqQsStTvVzZ])/))e[e.length]={type:0,text:RegExp.$1},t=t.substr(RegExp.$1.length);else{if(!t.match(/^(([-+]?[0-9]+(\.[0-9]*)?|[-+]?\.[0-9]+)([eE][-+]?[0-9]+)?)/))return[];e[e.length]={type:1,text:`${parseFloat(RegExp.$1)}`},t=t.substr(RegExp.$1.length)}return e[e.length]={type:2,text:""},e}(t);let r="BOD",i=0,o=n[i];for(;!y(o,2);){let a=0;const s=[];if("BOD"===r){if("M"!==o.text&&"m"!==o.text)return b("M0,0"+t);i++,a=g[o.text],r=o.text}else y(o,1)?a=g[r]:(i++,a=g[o.text],r=o.text);if(!(i+a<n.length))throw new Error("Path data ended short");for(let t=i;t<i+a;t++){const e=n[t];if(!y(e,1))throw new Error("Param not a number: "+r+","+e.text);s[s.length]=+e.text}if("number"!=typeof g[r])throw new Error("Bad segment: "+r);{const t={key:r,data:s};e.push(t),i+=a,o=n[i],"M"===r&&(r="L"),"m"===r&&(r="l")}}return e}function v(t){let e=0,n=0,r=0,i=0;const o=[];for(const{key:a,data:s}of t)switch(a){case"M":o.push({key:"M",data:[...s]}),[e,n]=s,[r,i]=s;break;case"m":e+=s[0],n+=s[1],o.push({key:"M",data:[e,n]}),r=e,i=n;break;case"L":o.push({key:"L",data:[...s]}),[e,n]=s;break;case"l":e+=s[0],n+=s[1],o.push({key:"L",data:[e,n]});break;case"C":o.push({key:"C",data:[...s]}),e=s[4],n=s[5];break;case"c":{const t=s.map(((t,r)=>r%2?t+n:t+e));o.push({key:"C",data:t}),e=t[4],n=t[5];break}case"Q":o.push({key:"Q",data:[...s]}),e=s[2],n=s[3];break;case"q":{const t=s.map(((t,r)=>r%2?t+n:t+e));o.push({key:"Q",data:t}),e=t[2],n=t[3];break}case"A":o.push({key:"A",data:[...s]}),e=s[5],n=s[6];break;case"a":e+=s[5],n+=s[6],o.push({key:"A",data:[s[0],s[1],s[2],s[3],s[4],e,n]});break;case"H":o.push({key:"H",data:[...s]}),e=s[0];break;case"h":e+=s[0],o.push({key:"H",data:[e]});break;case"V":o.push({key:"V",data:[...s]}),n=s[0];break;case"v":n+=s[0],o.push({key:"V",data:[n]});break;case"S":o.push({key:"S",data:[...s]}),e=s[2],n=s[3];break;case"s":{const t=s.map(((t,r)=>r%2?t+n:t+e));o.push({key:"S",data:t}),e=t[2],n=t[3];break}case"T":o.push({key:"T",data:[...s]}),e=s[0],n=s[1];break;case"t":e+=s[0],n+=s[1],o.push({key:"T",data:[e,n]});break;case"Z":case"z":o.push({key:"Z",data:[]}),e=r,n=i}return o}function _(t){const e=[];let n="",r=0,i=0,o=0,a=0,s=0,h=0;for(const{key:c,data:u}of t){switch(c){case"M":e.push({key:"M",data:[...u]}),[r,i]=u,[o,a]=u;break;case"C":e.push({key:"C",data:[...u]}),r=u[4],i=u[5],s=u[2],h=u[3];break;case"L":e.push({key:"L",data:[...u]}),[r,i]=u;break;case"H":r=u[0],e.push({key:"L",data:[r,i]});break;case"V":i=u[0],e.push({key:"L",data:[r,i]});break;case"S":{let t=0,o=0;"C"===n||"S"===n?(t=r+(r-s),o=i+(i-h)):(t=r,o=i),e.push({key:"C",data:[t,o,...u]}),s=u[0],h=u[1],r=u[2],i=u[3];break}case"T":{const[t,o]=u;let a=0,c=0;"Q"===n||"T"===n?(a=r+(r-s),c=i+(i-h)):(a=r,c=i);const l=r+2*(a-r)/3,f=i+2*(c-i)/3,d=t+2*(a-t)/3,p=o+2*(c-o)/3;e.push({key:"C",data:[l,f,d,p,t,o]}),s=a,h=c,r=t,i=o;break}case"Q":{const[t,n,o,a]=u,c=r+2*(t-r)/3,l=i+2*(n-i)/3,f=o+2*(t-o)/3,d=a+2*(n-a)/3;e.push({key:"C",data:[c,l,f,d,o,a]}),s=t,h=n,r=o,i=a;break}case"A":{const t=Math.abs(u[0]),n=Math.abs(u[1]),o=u[2],a=u[3],s=u[4],h=u[5],c=u[6];0===t||0===n?(e.push({key:"C",data:[r,i,h,c,h,c]}),r=h,i=c):r===h&&i===c||(x(r,i,h,c,t,n,o,a,s).forEach((function(t){e.push({key:"C",data:t})})),r=h,i=c);break}case"Z":e.push({key:"Z",data:[]}),r=o,i=a}n=c}return e}function w(t,e,n){return[t*Math.cos(n)-e*Math.sin(n),t*Math.sin(n)+e*Math.cos(n)]}function x(t,e,n,r,i,o,a,s,h,c){const u=(l=a,Math.PI*l/180);var l;let f=[],d=0,p=0,m=0,g=0;if(c)[d,p,m,g]=c;else{[t,e]=w(t,e,-u),[n,r]=w(n,r,-u);const a=(t-n)/2,c=(e-r)/2;let l=a*a/(i*i)+c*c/(o*o);l>1&&(l=Math.sqrt(l),i*=l,o*=l);const f=i*i,y=o*o,b=f*y-f*c*c-y*a*a,v=f*c*c+y*a*a,_=(s===h?-1:1)*Math.sqrt(Math.abs(b/v));m=_*i*c/o+(t+n)/2,g=_*-o*a/i+(e+r)/2,d=Math.asin(parseFloat(((e-g)/o).toFixed(9))),p=Math.asin(parseFloat(((r-g)/o).toFixed(9))),t<m&&(d=Math.PI-d),n<m&&(p=Math.PI-p),d<0&&(d=2*Math.PI+d),p<0&&(p=2*Math.PI+p),h&&d>p&&(d-=2*Math.PI),!h&&p>d&&(p-=2*Math.PI)}let y=p-d;if(Math.abs(y)>120*Math.PI/180){const t=p,e=n,s=r;p=h&&p>d?d+120*Math.PI/180*1:d+120*Math.PI/180*-1,f=x(n=m+i*Math.cos(p),r=g+o*Math.sin(p),e,s,i,o,a,0,h,[p,t,m,g])}y=p-d;const b=Math.cos(d),v=Math.sin(d),_=Math.cos(p),M=Math.sin(p),N=Math.tan(y/4),E=4/3*i*N,T=4/3*o*N,O=[t,e],S=[t+E*v,e-T*b],k=[n+E*M,r-T*_],A=[n,r];if(S[0]=2*O[0]-S[0],S[1]=2*O[1]-S[1],c)return[S,k,A].concat(f);{f=[S,k,A].concat(f);const t=[];for(let e=0;e<f.length;e+=3){const n=w(f[e][0],f[e][1],u),r=w(f[e+1][0],f[e+1][1],u),i=w(f[e+2][0],f[e+2][1],u);t.push([n[0],n[1],r[0],r[1],i[0],i[1]])}return t}}const M={randOffset:function(t,e){return C(t,e)},randOffsetWithRange:function(t,e,n){return I(t,e,n)},ellipse:function(t,e,n,r,i){return O(t,e,i,T(n,r,i)).opset},doubleLineOps:function(t,e,n,r,i){return P(t,e,n,r,i,!0)}};function N(t,e,n,r,i){return{type:"path",ops:P(t,e,n,r,i)}}function E(t,e,n){const r=(t||[]).length;if(r>2){const i=[];for(let e=0;e<r-1;e++)i.push(...P(t[e][0],t[e][1],t[e+1][0],t[e+1][1],n));return e&&i.push(...P(t[r-1][0],t[r-1][1],t[0][0],t[0][1],n)),{type:"path",ops:i}}return 2===r?N(t[0][0],t[0][1],t[1][0],t[1][1],n):{type:"path",ops:[]}}function T(t,e,n){const r=Math.sqrt(2*Math.PI*Math.sqrt((Math.pow(t/2,2)+Math.pow(e/2,2))/2)),i=Math.ceil(Math.max(n.curveStepCount,n.curveStepCount/Math.sqrt(200)*r)),o=2*Math.PI/i;let a=Math.abs(t/2),s=Math.abs(e/2);const h=1-n.curveFitting;return a+=C(a*h,n),s+=C(s*h,n),{increment:o,rx:a,ry:s}}function O(t,e,n,r){const[i,o]=z(r.increment,t,e,r.rx,r.ry,1,r.increment*I(.1,I(.4,1,n),n),n);let a=j(i,null,n);if(!n.disableMultiStroke&&0!==n.roughness){const[i]=z(r.increment,t,e,r.rx,r.ry,1.5,0,n),o=j(i,null,n);a=a.concat(o)}return{estimatedPoints:o,opset:{type:"path",ops:a}}}function S(t,e,n,r,i,o,a,s,h){const c=t,u=e;let l=Math.abs(n/2),f=Math.abs(r/2);l+=C(.01*l,h),f+=C(.01*f,h);let d=i,p=o;for(;d<0;)d+=2*Math.PI,p+=2*Math.PI;p-d>2*Math.PI&&(d=0,p=2*Math.PI);const m=2*Math.PI/h.curveStepCount,g=Math.min(m/2,(p-d)/2),y=F(g,c,u,l,f,d,p,1,h);if(!h.disableMultiStroke){const t=F(g,c,u,l,f,d,p,1.5,h);y.push(...t)}return a&&(s?y.push(...P(c,u,c+l*Math.cos(d),u+f*Math.sin(d),h),...P(c,u,c+l*Math.cos(p),u+f*Math.sin(p),h)):y.push({op:"lineTo",data:[c,u]},{op:"lineTo",data:[c+l*Math.cos(d),u+f*Math.sin(d)]})),{type:"path",ops:y}}function k(t,e){const n=[];for(const r of t)if(r.length){const t=e.maxRandomnessOffset||0,i=r.length;if(i>2){n.push({op:"move",data:[r[0][0]+C(t,e),r[0][1]+C(t,e)]});for(let o=1;o<i;o++)n.push({op:"lineTo",data:[r[o][0]+C(t,e),r[o][1]+C(t,e)]})}}return{type:"fillPath",ops:n}}function A(t,e){return function(t,e){let n=t.fillStyle||"hachure";if(!p[n])switch(n){case"zigzag":p[n]||(p[n]=new c(e));break;case"cross-hatch":p[n]||(p[n]=new u(e));break;case"dots":p[n]||(p[n]=new l(e));break;case"dashed":p[n]||(p[n]=new f(e));break;case"zigzag-line":p[n]||(p[n]=new d(e));break;default:n="hachure",p[n]||(p[n]=new h(e))}return p[n]}(e,M).fillPolygons(t,e)}function D(t){return t.randomizer||(t.randomizer=new m(t.seed||0)),t.randomizer.next()}function I(t,e,n,r=1){return n.roughness*r*(D(n)*(e-t)+t)}function C(t,e,n=1){return I(-t,t,e,n)}function P(t,e,n,r,i,o=!1){const a=o?i.disableMultiStrokeFill:i.disableMultiStroke,s=L(t,e,n,r,i,!0,!1);if(a)return s;const h=L(t,e,n,r,i,!0,!0);return s.concat(h)}function L(t,e,n,r,i,o,a){const s=Math.pow(t-n,2)+Math.pow(e-r,2),h=Math.sqrt(s);let c=1;c=h<200?1:h>500?.4:-.0016668*h+1.233334;let u=i.maxRandomnessOffset||0;u*u*100>s&&(u=h/10);const l=u/2,f=.2+.2*D(i);let d=i.bowing*i.maxRandomnessOffset*(r-e)/200,p=i.bowing*i.maxRandomnessOffset*(t-n)/200;d=C(d,i,c),p=C(p,i,c);const m=[],g=()=>C(l,i,c),y=()=>C(u,i,c),b=i.preserveVertices;return o&&(a?m.push({op:"move",data:[t+(b?0:g()),e+(b?0:g())]}):m.push({op:"move",data:[t+(b?0:C(u,i,c)),e+(b?0:C(u,i,c))]})),a?m.push({op:"bcurveTo",data:[d+t+(n-t)*f+g(),p+e+(r-e)*f+g(),d+t+2*(n-t)*f+g(),p+e+2*(r-e)*f+g(),n+(b?0:g()),r+(b?0:g())]}):m.push({op:"bcurveTo",data:[d+t+(n-t)*f+y(),p+e+(r-e)*f+y(),d+t+2*(n-t)*f+y(),p+e+2*(r-e)*f+y(),n+(b?0:y()),r+(b?0:y())]}),m}function R(t,e,n){const r=[];r.push([t[0][0]+C(e,n),t[0][1]+C(e,n)]),r.push([t[0][0]+C(e,n),t[0][1]+C(e,n)]);for(let i=1;i<t.length;i++)r.push([t[i][0]+C(e,n),t[i][1]+C(e,n)]),i===t.length-1&&r.push([t[i][0]+C(e,n),t[i][1]+C(e,n)]);return j(r,null,n)}function j(t,e,n){const r=t.length,i=[];if(r>3){const o=[],a=1-n.curveTightness;i.push({op:"move",data:[t[1][0],t[1][1]]});for(let e=1;e+2<r;e++){const n=t[e];o[0]=[n[0],n[1]],o[1]=[n[0]+(a*t[e+1][0]-a*t[e-1][0])/6,n[1]+(a*t[e+1][1]-a*t[e-1][1])/6],o[2]=[t[e+1][0]+(a*t[e][0]-a*t[e+2][0])/6,t[e+1][1]+(a*t[e][1]-a*t[e+2][1])/6],o[3]=[t[e+1][0],t[e+1][1]],i.push({op:"bcurveTo",data:[o[1][0],o[1][1],o[2][0],o[2][1],o[3][0],o[3][1]]})}if(e&&2===e.length){const t=n.maxRandomnessOffset;i.push({op:"lineTo",data:[e[0]+C(t,n),e[1]+C(t,n)]})}}else 3===r?(i.push({op:"move",data:[t[1][0],t[1][1]]}),i.push({op:"bcurveTo",data:[t[1][0],t[1][1],t[2][0],t[2][1],t[2][0],t[2][1]]})):2===r&&i.push(...P(t[0][0],t[0][1],t[1][0],t[1][1],n));return i}function z(t,e,n,r,i,o,a,s){const h=[],c=[];if(0===s.roughness){t/=4,c.push([e+r*Math.cos(-t),n+i*Math.sin(-t)]);for(let o=0;o<=2*Math.PI;o+=t){const t=[e+r*Math.cos(o),n+i*Math.sin(o)];h.push(t),c.push(t)}c.push([e+r*Math.cos(0),n+i*Math.sin(0)]),c.push([e+r*Math.cos(t),n+i*Math.sin(t)])}else{const u=C(.5,s)-Math.PI/2;c.push([C(o,s)+e+.9*r*Math.cos(u-t),C(o,s)+n+.9*i*Math.sin(u-t)]);const l=2*Math.PI+u-.01;for(let a=u;a<l;a+=t){const t=[C(o,s)+e+r*Math.cos(a),C(o,s)+n+i*Math.sin(a)];h.push(t),c.push(t)}c.push([C(o,s)+e+r*Math.cos(u+2*Math.PI+.5*a),C(o,s)+n+i*Math.sin(u+2*Math.PI+.5*a)]),c.push([C(o,s)+e+.98*r*Math.cos(u+a),C(o,s)+n+.98*i*Math.sin(u+a)]),c.push([C(o,s)+e+.9*r*Math.cos(u+.5*a),C(o,s)+n+.9*i*Math.sin(u+.5*a)])}return[c,h]}function F(t,e,n,r,i,o,a,s,h){const c=o+C(.1,h),u=[];u.push([C(s,h)+e+.9*r*Math.cos(c-t),C(s,h)+n+.9*i*Math.sin(c-t)]);for(let o=c;o<=a;o+=t)u.push([C(s,h)+e+r*Math.cos(o),C(s,h)+n+i*Math.sin(o)]);return u.push([e+r*Math.cos(a),n+i*Math.sin(a)]),u.push([e+r*Math.cos(a),n+i*Math.sin(a)]),j(u,null,h)}function U(t,e,n,r,i,o,a,s){const h=[],c=[s.maxRandomnessOffset||1,(s.maxRandomnessOffset||1)+.3];let u=[0,0];const l=s.disableMultiStroke?1:2,f=s.preserveVertices;for(let d=0;d<l;d++)0===d?h.push({op:"move",data:[a[0],a[1]]}):h.push({op:"move",data:[a[0]+(f?0:C(c[0],s)),a[1]+(f?0:C(c[0],s))]}),u=f?[i,o]:[i+C(c[d],s),o+C(c[d],s)],h.push({op:"bcurveTo",data:[t+C(c[d],s),e+C(c[d],s),n+C(c[d],s),r+C(c[d],s),u[0],u[1]]});return h}function q(t){return[...t]}function $(t,e){return Math.pow(t[0]-e[0],2)+Math.pow(t[1]-e[1],2)}function B(t,e,n){const r=$(e,n);if(0===r)return $(t,e);let i=((t[0]-e[0])*(n[0]-e[0])+(t[1]-e[1])*(n[1]-e[1]))/r;return i=Math.max(0,Math.min(1,i)),$(t,H(e,n,i))}function H(t,e,n){return[t[0]+(e[0]-t[0])*n,t[1]+(e[1]-t[1])*n]}function W(t,e,n,r){const i=r||[];if(function(t,e){const n=t[e+0],r=t[e+1],i=t[e+2],o=t[e+3];let a=3*r[0]-2*n[0]-o[0];a*=a;let s=3*r[1]-2*n[1]-o[1];s*=s;let h=3*i[0]-2*o[0]-n[0];h*=h;let c=3*i[1]-2*o[1]-n[1];return c*=c,a<h&&(a=h),s<c&&(s=c),a+s}(t,e)<n){const n=t[e+0];i.length?(o=i[i.length-1],a=n,Math.sqrt($(o,a))>1&&i.push(n)):i.push(n),i.push(t[e+3])}else{const r=.5,o=t[e+0],a=t[e+1],s=t[e+2],h=t[e+3],c=H(o,a,r),u=H(a,s,r),l=H(s,h,r),f=H(c,u,r),d=H(u,l,r),p=H(f,d,r);W([o,c,f,p],0,n,i),W([p,d,l,h],0,n,i)}var o,a;return i}function V(t,e){return G(t,0,t.length,e)}function G(t,e,n,r,i){const o=i||[],a=t[e],s=t[n-1];let h=0,c=1;for(let r=e+1;r<n-1;++r){const e=B(t[r],a,s);e>h&&(h=e,c=r)}return Math.sqrt(h)>r?(G(t,e,c+1,r,o),G(t,c,n,r,o)):(o.length||o.push(a),o.push(s)),o}function X(t,e=.15,n){const r=[],i=(t.length-1)/3;for(let n=0;n<i;n++)W(t,3*n,e,r);return n&&n>0?G(r,0,r.length,n):r}const Z="none";class Y{constructor(t){this.defaultOptions={maxRandomnessOffset:2,roughness:1,bowing:1,stroke:"#000",strokeWidth:1,curveTightness:0,curveFitting:.95,curveStepCount:9,fillStyle:"hachure",fillWeight:-1,hachureAngle:-41,hachureGap:-1,dashOffset:-1,dashGap:-1,zigzagOffset:-1,seed:0,disableMultiStroke:!1,disableMultiStrokeFill:!1,preserveVertices:!1},this.config=t||{},this.config.options&&(this.defaultOptions=this._o(this.config.options))}static newSeed(){return Math.floor(Math.random()*2**31)}_o(t){return t?Object.assign({},this.defaultOptions,t):this.defaultOptions}_d(t,e,n){return{shape:t,sets:e||[],options:n||this.defaultOptions}}line(t,e,n,r,i){const o=this._o(i);return this._d("line",[N(t,e,n,r,o)],o)}rectangle(t,e,n,r,i){const o=this._o(i),a=[],s=function(t,e,n,r,i){return function(t,e){return E(t,!0,e)}([[t,e],[t+n,e],[t+n,e+r],[t,e+r]],i)}(t,e,n,r,o);if(o.fill){const i=[[t,e],[t+n,e],[t+n,e+r],[t,e+r]];"solid"===o.fillStyle?a.push(k([i],o)):a.push(A([i],o))}return o.stroke!==Z&&a.push(s),this._d("rectangle",a,o)}ellipse(t,e,n,r,i){const o=this._o(i),a=[],s=T(n,r,o),h=O(t,e,o,s);if(o.fill)if("solid"===o.fillStyle){const n=O(t,e,o,s).opset;n.type="fillPath",a.push(n)}else a.push(A([h.estimatedPoints],o));return o.stroke!==Z&&a.push(h.opset),this._d("ellipse",a,o)}circle(t,e,n,r){const i=this.ellipse(t,e,n,n,r);return i.shape="circle",i}linearPath(t,e){const n=this._o(e);return this._d("linearPath",[E(t,!1,n)],n)}arc(t,e,n,r,i,o,a=!1,s){const h=this._o(s),c=[],u=S(t,e,n,r,i,o,a,!0,h);if(a&&h.fill)if("solid"===h.fillStyle){const a=Object.assign({},h);a.disableMultiStroke=!0;const s=S(t,e,n,r,i,o,!0,!1,a);s.type="fillPath",c.push(s)}else c.push(function(t,e,n,r,i,o,a){const s=t,h=e;let c=Math.abs(n/2),u=Math.abs(r/2);c+=C(.01*c,a),u+=C(.01*u,a);let l=i,f=o;for(;l<0;)l+=2*Math.PI,f+=2*Math.PI;f-l>2*Math.PI&&(l=0,f=2*Math.PI);const d=(f-l)/a.curveStepCount,p=[];for(let t=l;t<=f;t+=d)p.push([s+c*Math.cos(t),h+u*Math.sin(t)]);return p.push([s+c*Math.cos(f),h+u*Math.sin(f)]),p.push([s,h]),A([p],a)}(t,e,n,r,i,o,h));return h.stroke!==Z&&c.push(u),this._d("arc",c,h)}curve(t,e){const n=this._o(e),r=[],i=function(t,e){let n=R(t,1*(1+.2*e.roughness),e);if(!e.disableMultiStroke){const r=R(t,1.5*(1+.22*e.roughness),function(t){const e=Object.assign({},t);return e.randomizer=void 0,t.seed&&(e.seed=t.seed+1),e}(e));n=n.concat(r)}return{type:"path",ops:n}}(t,n);if(n.fill&&n.fill!==Z&&t.length>=3){const e=X(function(t,e=0){const n=t.length;if(n<3)throw new Error("A curve must have at least three points.");const r=[];if(3===n)r.push(q(t[0]),q(t[1]),q(t[2]),q(t[2]));else{const n=[];n.push(t[0],t[0]);for(let e=1;e<t.length;e++)n.push(t[e]),e===t.length-1&&n.push(t[e]);const i=[],o=1-e;r.push(q(n[0]));for(let t=1;t+2<n.length;t++){const e=n[t];i[0]=[e[0],e[1]],i[1]=[e[0]+(o*n[t+1][0]-o*n[t-1][0])/6,e[1]+(o*n[t+1][1]-o*n[t-1][1])/6],i[2]=[n[t+1][0]+(o*n[t][0]-o*n[t+2][0])/6,n[t+1][1]+(o*n[t][1]-o*n[t+2][1])/6],i[3]=[n[t+1][0],n[t+1][1]],r.push(i[1],i[2],i[3])}}return r}(t),10,(1+n.roughness)/2);"solid"===n.fillStyle?r.push(k([e],n)):r.push(A([e],n))}return n.stroke!==Z&&r.push(i),this._d("curve",r,n)}polygon(t,e){const n=this._o(e),r=[],i=E(t,!0,n);return n.fill&&("solid"===n.fillStyle?r.push(k([t],n)):r.push(A([t],n))),n.stroke!==Z&&r.push(i),this._d("polygon",r,n)}path(t,e){const n=this._o(e),r=[];if(!t)return this._d("path",r,n);t=(t||"").replace(/\n/g," ").replace(/(-\s)/g,"-").replace("/(ss)/g"," ");const i=n.fill&&"transparent"!==n.fill&&n.fill!==Z,o=n.stroke!==Z,a=!!(n.simplification&&n.simplification<1),s=function(t,e,n){const r=_(v(b(t))),i=[];let o=[],a=[0,0],s=[];const h=()=>{s.length>=4&&o.push(...X(s,1)),s=[]},c=()=>{h(),o.length&&(i.push(o),o=[])};for(const{key:t,data:e}of r)switch(t){case"M":c(),a=[e[0],e[1]],o.push(a);break;case"L":h(),o.push([e[0],e[1]]);break;case"C":if(!s.length){const t=o.length?o[o.length-1]:a;s.push([t[0],t[1]])}s.push([e[0],e[1]]),s.push([e[2],e[3]]),s.push([e[4],e[5]]);break;case"Z":h(),o.push([a[0],a[1]])}if(c(),!n)return i;const u=[];for(const t of i){const e=V(t,n);e.length&&u.push(e)}return u}(t,0,a?4-4*n.simplification:(1+n.roughness)/2);return i&&("solid"===n.fillStyle?r.push(k(s,n)):r.push(A(s,n))),o&&(a?s.forEach((t=>{r.push(E(t,!1,n))})):r.push(function(t,e){const n=_(v(b(t))),r=[];let i=[0,0],o=[0,0];for(const{key:t,data:a}of n)switch(t){case"M":{const t=1*(e.maxRandomnessOffset||0),n=e.preserveVertices;r.push({op:"move",data:a.map((r=>r+(n?0:C(t,e))))}),o=[a[0],a[1]],i=[a[0],a[1]];break}case"L":r.push(...P(o[0],o[1],a[0],a[1],e)),o=[a[0],a[1]];break;case"C":{const[t,n,i,s,h,c]=a;r.push(...U(t,n,i,s,h,c,o,e)),o=[h,c];break}case"Z":r.push(...P(o[0],o[1],i[0],i[1],e)),o=[i[0],i[1]]}return{type:"path",ops:r}}(t,n))),this._d("path",r,n)}opsToPath(t,e){let n="";for(const r of t.ops){const t="number"==typeof e&&e>=0?r.data.map((t=>+t.toFixed(e))):r.data;switch(r.op){case"move":n+=`M${t[0]} ${t[1]} `;break;case"bcurveTo":n+=`C${t[0]} ${t[1]}, ${t[2]} ${t[3]}, ${t[4]} ${t[5]} `;break;case"lineTo":n+=`L${t[0]} ${t[1]} `}}return n.trim()}toPaths(t){const e=t.sets||[],n=t.options||this.defaultOptions,r=[];for(const t of e){let e=null;switch(t.type){case"path":e={d:this.opsToPath(t),stroke:n.stroke,strokeWidth:n.strokeWidth,fill:Z};break;case"fillPath":e={d:this.opsToPath(t),stroke:Z,strokeWidth:0,fill:n.fill||Z};break;case"fillSketch":e=this.fillSketch(t,n)}e&&r.push(e)}return r}fillSketch(t,e){let n=e.fillWeight;return n<0&&(n=e.strokeWidth/2),{d:this.opsToPath(t),stroke:e.fill||Z,strokeWidth:n,fill:Z}}}const Q="http://www.w3.org/2000/svg";class K{constructor(t,e){this.svg=t,this.gen=new Y(e)}draw(t){const e=t.sets||[],n=t.options||this.getDefaultOptions(),r=this.svg.ownerDocument||window.document,i=r.createElementNS(Q,"g"),o=t.options.fixedDecimalPlaceDigits;for(const a of e){let e=null;switch(a.type){case"path":e=r.createElementNS(Q,"path"),e.setAttribute("d",this.opsToPath(a,o)),e.setAttribute("stroke",n.stroke),e.setAttribute("stroke-width",n.strokeWidth+""),e.setAttribute("fill","none"),n.strokeLineDash&&e.setAttribute("stroke-dasharray",n.strokeLineDash.join(" ").trim()),n.strokeLineDashOffset&&e.setAttribute("stroke-dashoffset",`${n.strokeLineDashOffset}`);break;case"fillPath":e=r.createElementNS(Q,"path"),e.setAttribute("d",this.opsToPath(a,o)),e.setAttribute("stroke","none"),e.setAttribute("stroke-width","0"),e.setAttribute("fill",n.fill||""),"curve"!==t.shape&&"polygon"!==t.shape||e.setAttribute("fill-rule","evenodd");break;case"fillSketch":e=this.fillSketch(r,a,n)}e&&i.appendChild(e)}return i}fillSketch(t,e,n){let r=n.fillWeight;r<0&&(r=n.strokeWidth/2);const i=t.createElementNS(Q,"path");return i.setAttribute("d",this.opsToPath(e,n.fixedDecimalPlaceDigits)),i.setAttribute("stroke",n.fill||""),i.setAttribute("stroke-width",r+""),i.setAttribute("fill","none"),n.fillLineDash&&i.setAttribute("stroke-dasharray",n.fillLineDash.join(" ").trim()),n.fillLineDashOffset&&i.setAttribute("stroke-dashoffset",`${n.fillLineDashOffset}`),i}get generator(){return this.gen}getDefaultOptions(){return this.gen.defaultOptions}opsToPath(t,e){return this.gen.opsToPath(t,e)}line(t,e,n,r,i){const o=this.gen.line(t,e,n,r,i);return this.draw(o)}rectangle(t,e,n,r,i){const o=this.gen.rectangle(t,e,n,r,i);return this.draw(o)}ellipse(t,e,n,r,i){const o=this.gen.ellipse(t,e,n,r,i);return this.draw(o)}circle(t,e,n,r){const i=this.gen.circle(t,e,n,r);return this.draw(i)}linearPath(t,e){const n=this.gen.linearPath(t,e);return this.draw(n)}polygon(t,e){const n=this.gen.polygon(t,e);return this.draw(n)}arc(t,e,n,r,i,o,a=!1,s){const h=this.gen.arc(t,e,n,r,i,o,a,s);return this.draw(h)}curve(t,e){const n=this.gen.curve(t,e);return this.draw(n)}path(t,e){const n=this.gen.path(t,e);return this.draw(n)}}function J(t){return J="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},J(t)}function tt(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return et(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?et(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function et(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function nt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,i=function(t,e){if("object"!==J(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==J(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===J(i)?i:String(i)),r)}var i}var rt=n(996),it=n(296),ot=it.populateStyleObject,at=it.immutable,st=it.collections,ht=it.presets,ct=it.default_text_style,ut=n(500).config,lt=n(969),ft=lt.DOMImplementation,dt=lt.XMLSerializer,pt=function(){function t(e){for(var n in function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),(e=e||{}).browser?this.document=document:this.document=(new ft).createDocument("http://www.w3.org/1999/xhtml","html",null),this.svg=this.document.createElementNS("http://www.w3.org/2000/svg","svg"),this.svg.setAttribute("width",e.width||800),this.svg.setAttribute("height",e.height||800),this.rough_svg=((t,e)=>new K(t,e))(this.svg),ut)this[n]=e.hasOwnProperty(n)?e[n]:ut[n]}var e,n;return e=t,n=[{key:"save",value:function(t){var e=(new dt).serializeToString(this.svg);void 0===t?console.log(e):i().writeFile(t,e,(function(t){t&&console.error(t)}))}},{key:"render",value:function(t){var e=t.getContext("2d"),n=new Image,r="data:image/svg+xml;base64,"+window.btoa(this.svg);n.src=r,e.drawImage(n,0,0)}},{key:"drawObject",value:function(t,e,n,r,i,o,a){return st.includes(n)?"dict"===n?this.drawDict(t,e,r,i,a):"set"===n?this.drawSet(t,e,r,i,a):"list"===n||"tuple"===n?this.drawSequence(t,e,n,r,i,o,a):void 0:this.drawPrimitive(t,e,n,r,i,a)}},{key:"drawPrimitive",value:function(t,e,n,r,i,o){var a=Math.max(this.obj_min_width,this.getTextLength(String(i))+this.obj_x_padding);this.drawRect(t,e,a,this.obj_min_height,o.box_container);var s,h={width:a,height:this.obj_min_heigth,x:t,y:e};return at.includes(n)&&(this.drawRect(t-this.double_rect_sep,e-this.double_rect_sep,a+2*this.double_rect_sep,this.obj_min_height+2*this.double_rect_sep),h={width:a+2*this.double_rect_sep,height:this.obj_min_height+2*this.double_rect_sep,x:t-this.double_rect_sep,y:e-this.double_rect_sep}),s="bool"===n?i?"True":"False":JSON.stringify(i),null!=i&&this.drawText(s,t+a/2,e+(this.obj_min_height+this.prop_min_height)/2,o.text_value),this.drawProperties(r,n,t,e,a,o),h}},{key:"drawProperties",value:function(t,e,n,r,i,o){var a=Math.max(this.prop_min_width,this.getTextLength("id".concat(t))+10),s=Math.max(this.prop_min_width,this.getTextLength(e)+10);this.drawText(null===t?"":"id".concat(t),n+a/2,r+1.5*this.font_size,o.text_id),this.drawText(e,n+i-s/2,r+1.5*this.font_size,o.text_type),this.drawRect(n,r,a,this.prop_min_height,o.box_id),this.drawRect(n+i-s,r,s,this.prop_min_height,o.box_type)}},{key:"drawSequence",value:function(t,e,n,r,i,o,a){var s=this,h=2*this.obj_x_padding;i.forEach((function(t){h+=Math.max(s.item_min_width,s.getTextLength(null===t?"":"id".concat(t))+10)})),h=Math.max(this.obj_min_width,h);var c=this.obj_min_height;o&&(c+=this.list_index_sep),this.drawRect(t,e,h,c,a.box_container);var u={width:h,height:c,x:t,y:e};at.includes(n)&&this.drawRect(t-this.double_rect_sep,e-this.double_rect_sep,h+2*this.double_rect_sep,c+2*this.double_rect_sep);var l=t+this.item_min_width/2,f=e+this.prop_min_height+(this.obj_min_height-this.prop_min_height-this.item_min_height)/2;return o&&(f+=this.list_index_sep),i.forEach((function(t,e){var n=null===t?"":"id".concat(t),r=Math.max(s.item_min_width,s.getTextLength(n)+10);s.drawRect(l,f,r,s.item_min_height),s.drawText(n,l+r/2,f+s.item_min_height/2+s.font_size/4,a.text_value),o&&s.drawText(e,l+r/2,f-s.item_min_height/4,a.text_id),l+=r})),"list"===n?this.drawProperties(r,"list",t,e,h,a):this.drawProperties(r,"tuple",t,e,h,a),u}},{key:"drawSet",value:function(t,e,n,r,i){var o=this,a=2*this.obj_x_padding;r.forEach((function(t){a+=Math.max(o.item_min_width,o.getTextLength(null===t?"":"id".concat(t))+10)})),a=Math.max(this.obj_min_width,a),a+=(r.length-1)*this.item_min_width/4,this.drawRect(t,e,a,this.obj_min_height,i.box_container);var s={x:t,y:e,width:a,height:this.obj_min_height},h=t+this.item_min_width/2,c=e+this.prop_min_height+(this.obj_min_height-this.prop_min_height-this.item_min_height)/2,u=c+this.item_min_height/2+this.font_size/4;return r.forEach((function(t,e){var n=null===t?"":"id".concat(t),r=Math.max(o.item_min_width,o.getTextLength(n)+10);o.drawRect(h,c,r,o.item_min_height),o.drawText(n,h+r/2,u,i.text_value),e>0&&o.drawText(",",h-o.item_min_width/8,u,ct),h+=r+o.item_min_height/4})),this.drawProperties(n,"set",t,e,a,i),this.drawText("{",t+this.item_min_width/4,u,ct),this.drawText("}",t+a-this.item_min_width/4,u,ct),s}},{key:"drawDict",value:function(t,e,n,r,i){var o=this.obj_min_width,a=this.prop_min_height+this.item_min_height/2,s=e+this.prop_min_height+this.item_min_height/2;for(var h in r){var c=null===h?"":"id".concat(h),u=null===h||null===r[h]?"":"id".concat(r[h]),l=Math.max(this.item_min_width,this.getTextLength(c+5)),f=Math.max(this.item_min_width,this.getTextLength(u+5));this.drawRect(t+this.obj_x_padding,s,l,this.item_min_height),this.drawText(c,t+this.item_min_width+2,s+this.item_min_height/2+ +this.font_size/4,i.text_value),s+=1.5*this.item_min_height,o=Math.max(o,2*this.obj_x_padding+l+f+2*this.font_size),a+=1.5*this.item_min_height}for(var d in s=e+this.prop_min_height+this.item_min_height/2,r){var p=null===d||null===r[d]?"":"id".concat(r[d]),m=Math.max(this.item_min_width,this.getTextLength(p+5));this.drawText(":",t+o/2,s+this.item_min_height/2+this.font_size/4,{fill:this.text_color}),this.drawRect(t+o/2+this.font_size,s,m,this.item_min_height),this.drawText(p,t+o/2+this.font_size+m/2,s+this.item_min_height/2+this.font_size/4,i.text_value),s+=1.5*this.item_min_height}this.drawRect(t,e,o,a,i.box_container);var g={x:t,y:e,width:o,height:a};return this.drawProperties(n,"dict",t,e,o,i),g}},{key:"drawClass",value:function(t,e,n,r,i,o,a){var s=this.obj_min_width,h=0;for(var c in i)h=Math.max(h,this.getTextLength(c));h>0&&(s=h+3*this.item_min_width),s=Math.max(s,this.prop_min_width+this.getTextLength(n)+10);var u;u=Object.keys(i).length>0?3*this.item_min_width/2*Object.keys(i).length+this.item_min_width/2+this.prop_min_height:this.obj_min_height,this.drawRect(t,e,s,u,a.box_container);var l={x:t,y:e,width:s,height:u},f=e+this.prop_min_height+this.item_min_height/2;for(var d in i){var p=i[d],m=null===p?"":"id".concat(p),g=Math.max(this.item_min_width,this.getTextLength(m)+10);this.drawRect(t+s-1.5*this.item_min_width,f,g,this.item_min_height),o||(a.text_value.hasOwnProperty("fill")||(a.text_value.fill=this.text_color),a.text_value.hasOwnProperty("text-anchor")||(a.text_value["text-anchor"]="begin")),this.drawText(d,t+this.item_min_width/2,f+this.item_min_height/2+this.font_size/4,a.text_value),this.drawText(m,t+s-1.5*this.item_min_width+g/2,f+this.item_min_height/2+this.font_size/4,a.text_id),f+=1.5*this.item_min_height}if(o){var y=this.getTextLength(n);this.drawRect(t,e,y+10,this.prop_min_height,a.box_container),this.drawText(n,t+y/2+5,e+.6*this.prop_min_height,a.text_type)}else this.drawProperties(r,n,t,e,s,a);return l}},{key:"drawRect",value:function(t,e,n,r,i){void 0===i&&(i=this.rect_style),this.svg.appendChild(this.rough_svg.rectangle(t,e,n,r,i))}},{key:"drawText",value:function(t,e,n,r){r.x=e,r.y=n;for(var i=0,o=Object.keys(ct);i<o.length;i++){var a=o[i];r.hasOwnProperty(a)||(r[a]=ct[a])}for(var s=this.document.createElementNS("http://www.w3.org/2000/svg","text"),h=0,c=Object.keys(r);h<c.length;h++){var u=c[h];s.setAttribute(u,r[u])}s.appendChild(this.document.createTextNode(t)),this.svg.appendChild(s)}},{key:"getTextLength",value:function(t){return 12*t.length}},{key:"drawAll",value:function(t){var e,n=[],r=tt(t);try{for(r.s();!(e=r.n()).done;){var i=e.value;if(Array.isArray(i.style)){var o,a={},s=tt(i.style);try{for(s.s();!(o=s.n()).done;){var h=o.value;"string"==typeof h&&(h=ht[h]),a=rt(a,h)}}catch(t){s.e(t)}finally{s.f()}i.style=a}if(i.style=ot(i),i.isClass){var c=this.drawClass(i.x,i.y,i.name,i.id,i.value,i.stack_frame,i.style);n.push(c)}else{var u=this.drawObject(i.x,i.y,i.name,i.id,i.value,i.show_indexes,i.style);n.push(u)}}}catch(t){r.e(t)}finally{r.f()}return n}}],n&&nt(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}()},296:(t,e,n)=>{"use strict";n.r(e),n.d(e,{collections:()=>c,default_text_style:()=>o,immutable:()=>h,populateStyleObject:()=>l,presets:()=>b,primitives:()=>u});var r=n(996),i=n(500).config,o={fill:i.text_color,"text-anchor":"middle","font-family":"Consolas, Courier","font-size":i.font_size},a={text_id:{fill:i.id_color,"text-anchor":"middle","font-family":"Consolas, Courier","font-size":i.font_size},text_type:{fill:i.value_color,"text-anchor":"middle","font-family":"Consolas, Courier","font-size":i.font_size},text_value:{"text-anchor":"middle","font-family":"Consolas, Courier","font-size":i.font_size},box_container:{},box_id:{},box_type:{}},s={collection:{text_value:{fill:i.id_color}},primitive:{text_value:{fill:i.value_color}},class:{text_value:{fill:i.value_color,"text-anchor":"begin"}},stackframe:{text_value:{fill:i.text_color,"text-anchor":"begin"}}},h=["int","str","tuple","None","bool","float","date"],c=["list","set","tuple","dict"],u=["int","str","None","bool","float","date"];function l(t){var e,n=a;return e=u.includes(t.name)?"primitive":c.includes(t.name)?"collection":t.stack_frame?"stackframe":"class",n=r(n,s[e]),r(n,t.style||{})}var f={"font-weight":"bolder","font-size":"22px"},d={"fill-opacity":.4},p={roughness:.2,strokeWidth:4},m={roughness:.2,strokeWidth:4,fill:"yellow",fillStyle:"solid"},g={roughness:2,strokeWidth:.5},y={fill:"white",fillStyle:"solid"},b={highlight:{text_value:f,text_id:f,text_type:f,box_id:p,box_type:p,box_container:m},highlight_id:{text_id:f,box_id:m},highlight_type:{text_type:f,box_type:m},fade:{text_value:d,text_id:d,text_type:d,box_id:g,box_type:g,box_container:{roughness:2,strokeWidth:.5,fill:"rgb(247, 247, 247)",fillStyle:"solid"}},fade_id:{text_id:d,box_id:g},fade_type:{text_type:d,box_type:g},hide:{box_container:y,box_id:y,box_type:y},hide_id:{box_id:y},hide_type:{box_type:y},hide_container:{box_container:y}}},134:(t,e,n)=>{"use strict";function r(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return i(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,s=!0,h=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return s=t.done,t},e:function(t){h=!0,a=t},f:function(){try{s||null==n.return||n.return()}finally{if(h)throw a}}}}function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}n.r(e),n.d(e,{draw:()=>u});var o=n(877).MemoryModel,a=n(367),s=a.drawAutomated,h=a.getSize,c=n(147);function u(t,e,n){var i,a;if("string"==typeof t){var u=c.readFileSync(t,"utf-8");i=JSON.parse(u)}else i=t;if(e){if(!n.hasOwnProperty("width"))throw new Error("Width argument for automated drawing is required.");a=s(i,n.width,n)}else{if(!n.hasOwnProperty("width")){var l,f=0,d=r(i);try{for(d.s();!(l=d.n()).done;){var p=l.value,m=h(p).width,g=p.x+m;g>f&&(f=g)}}catch(t){d.e(t)}finally{d.f()}n.width=f+100}if(!n.hasOwnProperty("height")){i[0];var y,b=0,v=r(i);try{for(v.s();!(y=v.n()).done;){var _=y.value,w=h(_).height;_.y+w>b&&(b=_.y+w)}}catch(t){v.e(t)}finally{v.f()}n.height=b+100}(a=new o({width:n.width,height:n.height})).drawAll(i)}return a}},996:t=>{"use strict";var e=function(t){return function(t){return!!t&&"object"==typeof t}(t)&&!function(t){var e=Object.prototype.toString.call(t);return"[object RegExp]"===e||"[object Date]"===e||function(t){return t.$$typeof===n}(t)}(t)},n="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function r(t,e){return!1!==e.clone&&e.isMergeableObject(t)?s((n=t,Array.isArray(n)?[]:{}),t,e):t;var n}function i(t,e,n){return t.concat(e).map((function(t){return r(t,n)}))}function o(t){return Object.keys(t).concat(function(t){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t).filter((function(e){return Object.propertyIsEnumerable.call(t,e)})):[]}(t))}function a(t,e){try{return e in t}catch(t){return!1}}function s(t,n,h){(h=h||{}).arrayMerge=h.arrayMerge||i,h.isMergeableObject=h.isMergeableObject||e,h.cloneUnlessOtherwiseSpecified=r;var c=Array.isArray(n);return c===Array.isArray(t)?c?h.arrayMerge(t,n,h):function(t,e,n){var i={};return n.isMergeableObject(t)&&o(t).forEach((function(e){i[e]=r(t[e],n)})),o(e).forEach((function(o){(function(t,e){return a(t,e)&&!(Object.hasOwnProperty.call(t,e)&&Object.propertyIsEnumerable.call(t,e))})(t,o)||(a(t,o)&&n.isMergeableObject(e[o])?i[o]=function(t,e){if(!e.customMerge)return s;var n=e.customMerge(t);return"function"==typeof n?n:s}(o,n)(t[o],e[o],n):i[o]=r(e[o],n))})),i}(t,n,h):r(n,h)}s.all=function(t,e){if(!Array.isArray(t))throw new Error("first argument should be an array");return t.reduce((function(t,n){return s(t,n,e)}),{})};var h=s;t.exports=h},147:t=>{"use strict";t.exports=require("fs")}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={exports:{}};return t[r](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var r={};return(()=>{"use strict";n.d(r,{default:()=>c});var t=n(877).MemoryModel,e=n(500).config,i=n(367),o=i.drawAutomated,a=i.drawAutomatedOtherItems,s=i.drawAutomatedStackFrames,h=i.getSize;const c={MemoryModel:t,config:e,drawAutomated:o,drawAutomatedOtherItems:a,drawAutomatedStackFrames:s,draw:n(134).draw,getSize:h}})(),r.default})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,